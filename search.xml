<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello Hexo</title>
    <url>/2018/08/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>fileReader读取文件，实现图片本地预览</title>
    <url>/2018/10/09/fileReader%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h3><p>FileReader 对象允许Web应用程序异步读取存储在用户计算机上的文件(或原始数据缓冲区)的内容,使用 File 或 Blob 对象指定要读取的文件或数据。</p>
<p>首先创建一个FileReader实例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var reader = new FileReader();</span><br></pre></td></tr></table></figure></p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>abort()</td>
<td>中止读取操作。在返回时，readyState属性为DONE。</td>
</tr>
<tr>
<td>readAsArrayBuffer()</td>
<td>开始读取指定的 Blob中的内容, 一旦完成, result 属性中保存的将是被读取文件的 ArrayBuffer 数据对象.</td>
</tr>
<tr>
<td>readAsBinaryString()</td>
<td>开始读取指定的Blob中的内容。一旦完成，result属性中将包含所读取文件的原始二进制数据。</td>
</tr>
<tr>
<td>readAsDataURL()</td>
<td>开始读取指定的Blob中的内容。一旦完成，result属性中将包含一个data: URL格式的字符串以表示所读取文件的内容</td>
</tr>
<tr>
<td>readAsText()</td>
<td>开始读取指定的Blob中的内容。一旦完成，result属性中将包含一个字符串以表示所读取的文件内容。</td>
</tr>
</tbody>
</table>
<h4 id="具体事例"><a href="#具体事例" class="headerlink" title="具体事例"></a>具体事例</h4><p>input file实现本地图片预览<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var inputBox = document.getElementById(&quot;inputBox&quot;);</span><br><span class="line">inputBox.addEventListener(&quot;change&quot;,function()&#123;</span><br><span class="line">  var reader = new FileReader();</span><br><span class="line">  reader.readAsDataURL(inputBox.files[0]);//发起异步请求</span><br><span class="line">  reader.onload = function()&#123;</span><br><span class="line">    // 读取完成后，base64数据保存在对象的result属性中</span><br><span class="line">    console.log(this.result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" target="_blank" rel="noopener">FileReader详解</a></li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>react-router解读（二）</title>
    <url>/2018/08/27/react-router%E8%A7%A3%E8%AF%BB%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h3 id="react-router-的路由实现"><a href="#react-router-的路由实现" class="headerlink" title="react-router 的路由实现"></a>react-router 的路由实现</h3><p>既然知道了这个原理，我们来看下 react-router 的实现，我们打开 <a href="https://github.com/ReactTraining/react-router" target="_blank" rel="noopener">react-router 项目地址</a>,把项目克隆下来，或则直接在 github 上预览，在 React 开发的项目里，我们通过 router.push(‘home’) 来实现页面的跳转，所以我们检索下，push 方法的实现</p>
<p><img src="/images/router/1.jpg" alt="push方法检索"></p>
<p>我们检索到了 46个 js 文件，😂，一般到这个时候，我们会放弃源码阅读，那么我们今天的文章就到这结束，谢谢大家！</p>
<p>开个玩笑，源码阅读不能这么粗糙，react-router 4.x用法，我们只需要安装 react-router-dom。所以我们找到 package 下的 react-router-dom/modules 目录，点开 <code>index.js</code> 文件。</p>
<pre>
  export BrowserRouter from "./BrowserRouter";
  export HashRouter from "./HashRouter";
  export Link from "./Link";
  export MemoryRouter from "./MemoryRouter";
  export NavLink from "./NavLink";
  export Prompt from "./Prompt";
  export Redirect from "./Redirect";
  export Route from "./Route";
  export Router from "./Router";
  export StaticRouter from "./StaticRouter";
  export Switch from "./Switch";
  export generatePath from "./generatePath";
  export matchPath from "./matchPath";
  export withRouter from "./withRouter";
</pre>

<p>看到 history 对象的实例与配置的 mode 有关，react-router-dom 通过3种方式实现了路由切换。我们今天讲的内容相匹配的是 <code>createBrowserHistory</code> 的实现方案 (另外两个分别是：createHashHistory和createMemoryHistory)。 这里 react-router-dom 将 BrowserRouter、HashRouter、Link 拆分为单独组件实现，也是与 react-router 3 之间的区别之一。<br><a href="https://github.com/ReactTraining/history#blocking-transitions" target="_blank" rel="noopener">详细文档</a><br>我们来看 react-router-dom 中的 BrowserRouter 源码：</p>
<pre>
    import warning from "warning";
    import React from "react";
    import PropTypes from "prop-types";
    import { createBrowserHistory as createHistory } from "history";
    import Router from "./Router";

    /**
    * The public API for a <router> that uses HTML5 history.
    */
    class BrowserRouter extends React.Component {
      static propTypes = {
        basename: PropTypes.string,
        forceRefresh: PropTypes.bool,
        getUserConfirmation: PropTypes.func,
        keyLength: PropTypes.number,
        children: PropTypes.node
      };

      history = createHistory(this.props);

      componentWillMount() {
        warning(
          !this.props.history,
          "<browserrouter> ignores the history prop. To use a custom history, " +
            "use `import { Router }` instead of `import { BrowserRouter as Router }`."
        );
      }

      render() {
        return <router history="{this.history}" children="{this.props.children}">;
      }
    }

    export default BrowserRouter;
</router></browserrouter></router></pre>

<p>由上可知我们在项目中使用的<browserrouter>组件，history方式是使用了一个叫<a href="https://github.com/ReactTraining/history" target="_blank" rel="noopener">history</a>库中的 createBrowserHistory 方法。</browserrouter></p>
<h3 id="模拟单页面路由"><a href="#模拟单页面路由" class="headerlink" title="模拟单页面路由"></a>模拟单页面路由</h3><p>通过上面的学习，我们知道了，单页面应用路由的实现原理，我们也尝试去实现一个。在做管理系统的时候，我们通常会在页面的左侧放置一个固定的导航 sidebar，页面的右侧放与之匹配的内容 main 。点击导航时，我们只希望内容进行更新，如果刷新了整个页面，到时导航和通用的头部底部也进行重绘重排的话，十分浪费资源，体验也会不好。这个时候，我们就能用到我们今天学习到的内容，通过使用 HTML5 的 pushState 方法和 replaceState 方法来实现，</p>
<p>思路：首先绑定 click 事件。当用户点击一个链接时，通过 preventDefault 函数防止默认的行为（页面跳转），同时读取链接的地址（如果有 jQuery，可以写成$(this).attr(‘href’)），把这个地址通过pushState塞入浏览器历史记录中，再利用 AJAX 技术拉取（如果有 jQuery，可以使用$.get方法）这个地址中真正的内容，同时替换当前网页的内容。</p>
<p>为了处理用户前进、后退，我们监听 popstate 事件。当用户点击前进或后退按钮时，浏览器地址自动被转换成相应的地址，同时popstate事件发生。在事件处理函数中，我们根据当前的地址抓取相应的内容，然后利用 AJAX 拉取这个地址的真正内容，呈现，即可。</p>
<p>最后，整个过程是不会改变页面标题的，可以通过直接对 document.title 赋值来更改页面标题。</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>好了,我们今天通过多个方面来讲了 pushState 方法和 replaceState 的应用，你应该对这个两个方法能有一个比较深刻的印象，如果想要了解更多，你可以参考以下链接</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History_API" target="_blank" rel="noopener">history对象</a></p>
]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>react-router解读（一）</title>
    <url>/2018/08/27/react-router%E8%A7%A3%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前端路由是通过改变URL，在不重新请求页面的情况下，更新页面视图。<br>目前在浏览器环境中这一功能的实现主要有2种:</p>
<ul>
<li>利用URL中的hash</li>
<li>利用H5中history</li>
</ul>
<h3 id="pushState-和-replaceState-了解一下"><a href="#pushState-和-replaceState-了解一下" class="headerlink" title="pushState 和 replaceState 了解一下"></a>pushState 和 replaceState 了解一下</h3><blockquote>
<p>history 提供了两个方法，能够无刷新的修改用户的浏览记录，pushSate，和 replaceState，区别的 pushState 在用户访问页面后面添加一个访问记录， replaceState 则是直接替换了当前访问记录</p>
</blockquote>
<p>history 对象的详细信息已经有很多很好很详细的介绍文献，这里不再做总结<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History_API" target="_blank" rel="noopener">history对象</a></p>
<h4 id="history-pushState"><a href="#history-pushState" class="headerlink" title="history.pushState"></a>history.pushState</h4><p>history.pushState方法接受三个参数，依次为：</p>
<blockquote>
<p>state：一个与指定网址相关的状态对象，popstate事件触发时，该对象会传入回调函数。如果不需要这个对象，此处可以填null。<br>title：新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填null。<br>url：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址。<br>假定当前网址是example.com/1.html，我们使用pushState方法在浏览记录（history对象）中添加一个新记录。</p>
</blockquote>
<pre>
    var stateObj = { foo: 'bar' };
    history.pushState(stateObj, 'page 2', '2.html');
</pre>

<p>添加上面这个新记录后，浏览器地址栏立刻显示 example.com/2.html，但并不会跳转到 2.html，甚至也不会检查2.html 是否存在，它只是成为浏览历史中的最新记录。这时，你在地址栏输入一个新的地址(比如访问 google.com )，然后点击了倒退按钮，页面的 URL 将显示 2.html；你再点击一次倒退按钮，URL 将显示 1.html。</p>
<p>总之，pushState 方法不会触发页面刷新，只是导致 history 对象发生变化，地址栏会有反应。</p>
<p>如果 pushState 的 url参数，设置了一个新的锚点值（即hash），并不会触发 hashchange 事件。如果设置了一个跨域网址，则会报错。</p>
<pre>
    // 报错
    history.pushState(null, null, 'https://twitter.com/hello');

    上面代码中，pushState想要插入一个跨域的网址，导致报错。这样设计的目的是，防止恶意代码让用户以为他们是在另一个网站上。
</pre>

<h4 id="history-replaceState"><a href="#history-replaceState" class="headerlink" title="history.replaceState"></a>history.replaceState</h4><p>history.replaceState 方法的参数与 pushState 方法一模一样，区别是它修改浏览历史中当前纪录,假定当前网页是 example.com/example.html。</p>
<pre>
    history.pushState({page: 1}, 'title 1', '?page=1');
    history.pushState({page: 2}, 'title 2', '?page=2');
    history.replaceState({page: 3}, 'title 3', '?page=3');

    history.back()
    // url显示为http://example.com/example.html?page=1

    history.back()
    // url显示为http://example.com/example.html

    history.go(2)
    // url显示为http://example.com/example.html?page=3

</pre>]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>react-router解读（三）</title>
    <url>/2018/08/28/react-router%E8%A7%A3%E8%AF%BB%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h2 id="history-methods-createBrowserHistory"><a href="#history-methods-createBrowserHistory" class="headerlink" title="history methods createBrowserHistory"></a>history methods createBrowserHistory</h2><p>通过之前我们已经知道了react-router-dom的<browserrouter> history模式使用的是history库中的createBrowserHistory方法。下面我们来一起看看其中的奥秘。</browserrouter></p>
<pre>
  var createBrowserHistory = function createBrowserHistory() {
    //  arguments[0], 由上一节可知它是一个非必传的object
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Browser history needs a DOM');
    //  之前将history赋值给变量globalHistory
    var globalHistory = window.history;
    //  _DOMUtils.js 中处理一些浏览器兼容性 和 浏览器内核、机型判断的方法
    //  判断是否非主流机型以及浏览器
    var canUseHistory = (0, _DOMUtils.supportsHistory)();
    //  是否为IE浏览器
    var needsHashChangeListener = !(0, _DOMUtils.supportsPopStateOnHashChange)();
    //  forceRefresh为true，代表将在页面导航时使用完整页面刷新。其他参数请自行参考官网文档
    var _props$forceRefresh = props.forceRefresh,
        forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,
        _props$getUserConfirm = props.getUserConfirmation,
        getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
        _props$keyLength = props.keyLength,
        keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;

    var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';

    var getDOMLocation = function getDOMLocation(historyState) {
      var _ref = historyState || {},
          key = _ref.key,
          state = _ref.state;

      var _window$location = window.location,
          pathname = _window$location.pathname,
          search = _window$location.search,
          hash = _window$location.hash;

      var path = pathname + search + hash;

      (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

      if (basename) path = (0, _PathUtils.stripBasename)(path, basename);

      return (0, _LocationUtils.createLocation)(path, state, key);
    };

    var createKey = function createKey() {
      return Math.random().toString(36).substr(2, keyLength);
    };

    var transitionManager = (0, _createTransitionManager2.default)();

    var setState = function setState(nextState) {
      _extends(history, nextState);

      history.length = globalHistory.length;

      transitionManager.notifyListeners(history.location, history.action);
    };

    var handlePopState = function handlePopState(event) {
      if ((0, _DOMUtils.isExtraneousPopstateEvent)(event)) return;

      handlePop(getDOMLocation(event.state));
    };

    var handleHashChange = function handleHashChange() {
      handlePop(getDOMLocation(getHistoryState()));
    };

    var forceNextPop = false;

    var handlePop = function handlePop(location) {
      if (forceNextPop) {
        forceNextPop = false;
        setState();
      } else {
        var action = 'POP';

        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (ok) {
            setState({ action: action, location: location });
          } else {
            revertPop(location);
          }
        });
      }
    };

    var revertPop = function revertPop(fromLocation) {
      var toLocation = history.location;

      // TODO: We could probably make this more reliable by
      // keeping a list of keys we've seen in sessionStorage.
      // Instead, we just default to 0 for keys we don't know.

      var toIndex = allKeys.indexOf(toLocation.key);

      if (toIndex === -1) toIndex = 0;

      var fromIndex = allKeys.indexOf(fromLocation.key);

      if (fromIndex === -1) fromIndex = 0;

      var delta = toIndex - fromIndex;

      if (delta) {
        forceNextPop = true;
        go(delta);
      }
    };

    var initialLocation = getDOMLocation(getHistoryState());
    var allKeys = [initialLocation.key];

    var createHref = function createHref(location) {
      return basename + (0, _PathUtils.createPath)(location);
    };

    var push = function push(path, state) {
      (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

      var action = 'PUSH';
      //  重写location对象
      var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (!ok) return;

        var href = createHref(location);
        var key = location.key,
            state = location.state;

        if (canUseHistory) {
          globalHistory.pushState({ key: key, state: state }, null, href);

          if (forceRefresh) {
            window.location.href = href;
          } else {
            var prevIndex = allKeys.indexOf(history.location.key);
            var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

            nextKeys.push(location.key);
            allKeys = nextKeys;

            setState({ action: action, location: location });
          }
        } else {
          (0, _warning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');

          window.location.href = href;
        }
      });
    };

    var replace = function replace(path, state) {
      (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

      var action = 'REPLACE';
      var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (!ok) return;

        var href = createHref(location);
        var key = location.key,
            state = location.state;


        if (canUseHistory) {
          globalHistory.replaceState({ key: key, state: state }, null, href);

          if (forceRefresh) {
            window.location.replace(href);
          } else {
            var prevIndex = allKeys.indexOf(history.location.key);

            if (prevIndex !== -1) allKeys[prevIndex] = location.key;

            setState({ action: action, location: location });
          }
        } else {
          (0, _warning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');

          window.location.replace(href);
        }
      });
    };

    var go = function go(n) {
      globalHistory.go(n);
    };

    var goBack = function goBack() {
      return go(-1);
    };

    var goForward = function goForward() {
      return go(1);
    };

    var listenerCount = 0;

    var checkDOMListeners = function checkDOMListeners(delta) {
      listenerCount += delta;

      if (listenerCount === 1) {
        (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);

        if (needsHashChangeListener) (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
      } else if (listenerCount === 0) {
        (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);

        if (needsHashChangeListener) (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
      }
    };

    var isBlocked = false;

    var block = function block() {
      var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      var unblock = transitionManager.setPrompt(prompt);

      if (!isBlocked) {
        checkDOMListeners(1);
        isBlocked = true;
      }

      return function () {
        if (isBlocked) {
          isBlocked = false;
          checkDOMListeners(-1);
        }

        return unblock();
      };
    };

    var listen = function listen(listener) {
      var unlisten = transitionManager.appendListener(listener);
      checkDOMListeners(1);

      return function () {
        checkDOMListeners(-1);
        unlisten();
      };
    };

    var history = {
      length: globalHistory.length,
      action: 'POP',
      location: initialLocation,
      createHref: createHref,
      push: push,
      replace: replace,
      go: go,
      goBack: goBack,
      goForward: goForward,
      block: block,
      listen: listen
    };

    return history;
  };
</pre>
]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>iframe的优缺点</title>
    <url>/2019/10/09/2019/%E6%B5%85%E8%B0%88iframe/</url>
    <content><![CDATA[<h1 id="iframe的优缺点"><a href="#iframe的优缺点" class="headerlink" title="iframe的优缺点"></a>iframe的优缺点</h1><h2 id="iframe的优点："><a href="#iframe的优点：" class="headerlink" title="iframe的优点："></a>iframe的优点：</h2><ol>
<li><p>iframe能够原封不动的把嵌入的网页展现出来。</p>
</li>
<li><p>如果有多个网页引用iframe，那么你只需要修改iframe的内容，就可以实现调用的每一个页面内容的更改，方便快捷。</p>
</li>
<li><p>网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用iframe来嵌套，可以增加代码的可重用。</p>
</li>
<li><p>如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由iframe来解决。</p>
</li>
</ol>
<h2 id="iframe的缺点："><a href="#iframe的缺点：" class="headerlink" title="iframe的缺点："></a>iframe的缺点：</h2><ol>
<li><p>会产生很多页面，不容易管理。</p>
</li>
<li><p>iframe框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差。</p>
</li>
<li><p>代码复杂，无法被一些搜索引擎索引到，这一点很关键，现在的搜索引擎爬虫还不能很好的处理iframe中的内容，所以使用iframe会不利于搜索引擎优化。</p>
</li>
<li><p>很多的移动设备（PDA 手机）无法完全显示框架，设备兼容性差。</p>
</li>
<li><p>iframe框架页面会增加服务器的http请求，对于大型网站不是可取的。</p>
</li>
</ol>
<h3 id="iframe迁移问题以及解决方案"><a href="#iframe迁移问题以及解决方案" class="headerlink" title="iframe迁移问题以及解决方案"></a>iframe迁移问题以及解决方案</h3><ol>
<li>import React, { propTypes } from ‘react’;</li>
</ol>
<p>error: PropTypes is undefined;</p>
<p>出现原因: React在新版本中废弃了集成类似propTypes这种第三方库方案。</p>
<p>解决方案: 新仓库使用的react版本较高，以上方式已被废弃，应使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>import ‘./style.less’;</li>
</ol>
<p>error: 样式失效问题。</p>
<p>出现原因: 新项目中开启了css-module，需要通过配置:global来声明一个全局class，使其在全局起作用。</p>
<p>解决方案1:</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">### <span class="selector-tag">style</span><span class="selector-class">.less</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="selector-pseudo">:global</span> &#123;</span><br><span class="line">        <span class="selector-class">.items</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./style.less'</span>;</span><br><span class="line"></span><br><span class="line">&lt;div className=&#123;styles.content&#125;&gt;</span><br><span class="line">    &lt;div className=<span class="string">"items"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>
<p>解决方案2:</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">style</span><span class="selector-class">.less</span></span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:global</span> &#123;</span><br><span class="line">    <span class="selector-class">.content</span> &#123;</span><br><span class="line">        <span class="selector-class">.items</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./style.less'</span>;</span><br><span class="line">&lt;div className=<span class="string">"content"</span>&gt;</span><br><span class="line">    &lt;div className=<span class="string">"items"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>
<p>推荐使用方案1，可以利用css-module的命名规则减少项目中样式的冲突问题。方案2改动小但是太暴力，非常可能产生样式冲突问题。</p>
<ol start="3">
<li>comm和components中组件出现不可用情况。</li>
</ol>
<p>error: 功能不可用情况。</p>
<p>解决方案: 建议直接使用antd替换，需要花上一点时间对应antd api做一定代码重构。(!这块需要仔细效验功能是否正常)</p>
<ol start="4">
<li>ec_fe中使用了Component.contextTypes。</li>
</ol>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Manage.contextTypes = &#123;</span><br><span class="line">    history: PropTypes.object.isRequired,</span><br><span class="line">    store: PropTypes.object.isRequired</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Warning: Failed context type: The context <code>history</code> is marked as required in <code>Connect(ContractReview)</code>, but its value is <code>undefined</code>.</p>
<p>解决方案：拆分出去的仓库，react-router版本使用的是4.x，已经不需要像老版本一样一层层传递history或者绑定在Context上共享的方式。</p>
<ol start="5">
<li>ec_fe中使用了this.props.router等路由api</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.props.router.replace(&#123;</span><br><span class="line">    pathname: <span class="string">`/admin/web/packageconfig/function.html`</span>,</span><br><span class="line">    query: &#123;</span><br><span class="line">        id: moduleList[<span class="number">0</span>].f_id,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>错误：index.jsx:59 Uncaught TypeError: Cannot read property ‘replace’ of undefined</p>
<p>解决方案：拆分出去的仓库，react-router版本使用的是4.x，请使用react-router-dom提供的api修改。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.props.history.replace(&#123;</span><br><span class="line">    pathname: <span class="string">`/packageconfig/funModule`</span>,</span><br><span class="line">    search: <span class="string">`id=<span class="subst">$&#123;moduleList[<span class="number">0</span>].f_id&#125;</span>`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><a href="https://www.jianshu.com/p/8fbee843437c" target="_blank" rel="noopener">浅谈iframe</a></li>
<li><a href="https://reacttraining.com/react-router/web/api/history/history-is-mutable" target="_blank" rel="noopener">react-router-dom</a></li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Symbol的应用场景</title>
    <url>/2020/02/20/2020/2%E6%9C%88/0220/</url>
    <content><![CDATA[<h4 id="Symbol的应用场景"><a href="#Symbol的应用场景" class="headerlink" title="Symbol的应用场景"></a>Symbol的应用场景</h4><h5 id="应用场景1：使用Symbol来作为对象属性名（key）"><a href="#应用场景1：使用Symbol来作为对象属性名（key）" class="headerlink" title="应用场景1：使用Symbol来作为对象属性名（key）"></a>应用场景1：使用Symbol来作为对象属性名（key）</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>()]: <span class="string">'test'</span>,</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(obj); <span class="comment">// ['a', 'b']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(p);   <span class="comment">//  分别输出: a 和 b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj);  <span class="comment">//   ['a', 'b']</span></span><br></pre></td></tr></table></figure>
<p>由上代码可知，Symbol类型的key是不能通过Object.keys()或者for…in来枚举的，它未被包含对象自身的属性名集合（property names）之中。所以，利用该特性，我们可以把一些不需要对外操作和访问的属性使用Symbol来定义。</p>
<h5 id="应用场景2：使用Symbol来替代常量"><a href="#应用场景2：使用Symbol来替代常量" class="headerlink" title="应用场景2：使用Symbol来替代常量"></a>应用场景2：使用Symbol来替代常量</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TYPE_AUDIO = <span class="string">'AUDIO'</span></span><br><span class="line"><span class="keyword">const</span> TYPE_VIDEO = <span class="string">'VIDEO'</span></span><br><span class="line"><span class="keyword">const</span> TYPE_IMAGE = <span class="string">'IMAGE'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleFileResource</span>(<span class="params">resource</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(resource.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> TYPE_AUDIO:</span><br><span class="line">      playAudio(resource)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> TYPE_VIDEO:</span><br><span class="line">      playVideo(resource)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> TYPE_IMAGE:</span><br><span class="line">      previewImage(resource)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Unknown type of resource'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上面的代码中那样，我们经常定义一组常量来代表一种业务逻辑下的几个不同类型，我们通常希望这几个常量之间是唯一的关系，常量少的时候还算好，但是常量一多，你可能还得花点脑子好好为他们取个好点的名字。</p>
<p>现在有了Symbol，我们大可不必这么麻烦了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TYPE_AUDIO = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> TYPE_VIDEO = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> TYPE_IMAGE = <span class="built_in">Symbol</span>()</span><br></pre></td></tr></table></figure>
<h5 id="应用场景3：使用Symbol定义类的私有属性-方法"><a href="#应用场景3：使用Symbol定义类的私有属性-方法" class="headerlink" title="应用场景3：使用Symbol定义类的私有属性/方法"></a>应用场景3：使用Symbol定义类的私有属性/方法</h5><p>使用的少</p>
<h3 id="彻底搞懂浏览器Event-loop"><a href="#彻底搞懂浏览器Event-loop" class="headerlink" title="彻底搞懂浏览器Event-loop"></a>彻底搞懂浏览器Event-loop</h3><h4 id="1-预备知识"><a href="#1-预备知识" class="headerlink" title="1. 预备知识"></a>1. 预备知识</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JavaScript的运行机制</span><br></pre></td></tr></table></figure>
<p>(1) 所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。<br>(2) 主线程之外，还存在”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。<br>(3) 一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。<br>(4) 主线程不断重复上面的第三步</p>
<p>概况就是：调用栈中的同步任务都执行完毕，栈内被清空了，就代表主线程空闲了，这个时候就会去任务队列中按照顺序读取一个任务放入到栈中执行。每次栈内被清空，都会去读取任务队列有没有任务，有就读取执行，一直循环读取-执行的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JavaScript中有两种异步任务：</span><br></pre></td></tr></table></figure>
<ol>
<li>宏任务：script（整体代码），setTimeout、setInterval、setImmediate、I/O、UI rendering</li>
<li>微任务：process.nextTick（Nodejs）、Promise、Object.observe、 MutationObServer</li>
</ol>
<h4 id="2-事件循环（event-loop）是什么？"><a href="#2-事件循环（event-loop）是什么？" class="headerlink" title="2. 事件循环（event-loop）是什么？"></a>2. 事件循环（event-loop）是什么？</h4><p>主线程从”任务队列”中读取执行事件，这个过程是循环不断的，这个机制被称为事件循环。此机制具体如下：主线程会不断从任务队列中按顺序读取任务执行，每执行一个任务都会检查microtask队列是否为空（执行完一个任务的具体标志是函数执行栈为空），如果不为空则会一次性执行完所有microtask。然后进入下一个循环去任务队列中取下一个任务执行。</p>
<p><strong>当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件, 然后再去宏任务队列中取出一个事件。同一次事件循环中, 微任务永远在宏任务之前执行。</strong></p>
<h4 id="3-为什么会需要event-loop"><a href="#3-为什么会需要event-loop" class="headerlink" title="3. 为什么会需要event-loop?"></a>3. 为什么会需要event-loop?</h4><p>因为 JavaScript 是单线程的。单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。为了协调事件（event），用户交互（user interaction），脚本（script），渲染（rendering），网络（networking）等，用户代理（user agent）必须使用事件循环（event loops）。</p>
<h4 id="node中的event-loop与浏览器之间的差异"><a href="#node中的event-loop与浏览器之间的差异" class="headerlink" title="node中的event-loop与浏览器之间的差异"></a>node中的event-loop与浏览器之间的差异</h4><p>浏览器和 Node 环境下，microtask 任务队列的执行时机不同</p>
<ul>
<li>Node 端，microtask 在事件循环的各个阶段之间执行</li>
<li>浏览器端，microtask 在事件循环的 macrotask 执行完之后执行</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'start'</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'timer1'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'timer2'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise3'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浏览器 start=&gt;end=&gt;promise3=&gt;timer1=&gt;promise1=&gt;timer2=&gt;promise2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// node start=&gt;end=&gt;promise3=&gt;timer1=&gt;timer2=&gt;promise1=&gt;promise2</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>css问题</title>
    <url>/2020/02/25/2020/2%E6%9C%88/0225/</url>
    <content><![CDATA[<h4 id="css问题"><a href="#css问题" class="headerlink" title="css问题"></a>css问题</h4><h5 id="用纯css创建一个三角形"><a href="#用纯css创建一个三角形" class="headerlink" title="用纯css创建一个三角形"></a>用纯css创建一个三角形</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    div &#123;</span></span><br><span class="line"><span class="undefined">        width: 0;</span></span><br><span class="line"><span class="undefined">        height: 0;</span></span><br><span class="line"><span class="undefined">        border-top: 40px solid transparent;</span></span><br><span class="line"><span class="undefined">        border-left: 40px solid transparent;</span></span><br><span class="line"><span class="undefined">        border-right: 40px solid transparent;</span></span><br><span class="line"><span class="undefined">        border-bottom: 40px solid #ff0000;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="如何理解css的盒模型"><a href="#如何理解css的盒模型" class="headerlink" title="如何理解css的盒模型"></a>如何理解css的盒模型</h5><blockquote>
<p>标准盒子模型：宽度=内容的宽度（content）+ border + padding<br>低版本IE盒子模型：宽度=内容宽度（content+border+padding)</p>
</blockquote>
<p>box-sizing属性</p>
<ul>
<li>content-box：默认值。这是 CSS2.1 指定的宽度和高度的行为。指定元素的宽度和高度（最小/最大属性）适用于box的宽度和高度。元素的填充和边框布局和绘制指定宽度和高度除外。</li>
<li>border-box： 指定宽度和高度（最小/最大属性）确定元素边框。也就是说，对元素指定宽度和高度包括了 padding 和 border 。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</li>
<li>inherit： 指定 box-sizing 属性的值，应该从父元素继承</li>
</ul>
<p>浏览器的兼容性问题<br>大多数浏览器都会按照上面的图示来呈现内容。然而 IE 5 和 6 的呈现却是不正确的。根据 W3C 的规范，元素内容占据的空间是由 width 属性设置的，而内容周围的 padding 和 border 值是另外计算的。不幸的是，IE5.X 和 6 在怪异模式中使用自己的非标准模型。这些浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。</p>
<h5 id="如何清除浮动？"><a href="#如何清除浮动？" class="headerlink" title="如何清除浮动？"></a>如何清除浮动？</h5><blockquote>
<p>clear清除浮动（添加空div法）在浮动元素下方添加空div,并给该元素写css样式 {clear:both;height:0;overflow:hidden;}</p>
</blockquote>
<blockquote>
<p>给浮动元素父级设置高度</p>
</blockquote>
<blockquote>
<p>父级同时浮动（需要给父级同级元素添加浮动）</p>
</blockquote>
<blockquote>
<p>父级设置成inline-block，其margin: 0 auto居中方式失效</p>
</blockquote>
<blockquote>
<p>给父级添加overflow:hidden 清除浮动方法</p>
</blockquote>
<blockquote>
<p>万能清除法 after伪类 清浮动（现在主流方法，推荐使用）</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">  &amp;:after &#123;</span><br><span class="line">    content: '';</span><br><span class="line">    <span class="selector-tag">clear</span>: <span class="selector-tag">both</span>;</span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">block</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 0;</span><br><span class="line">    <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line">    <span class="selector-tag">visibility</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈你对Redux的理解</title>
    <url>/2020/02/24/2020/2%E6%9C%88/0224/</url>
    <content><![CDATA[<h4 id="谈谈你对Redux的理解"><a href="#谈谈你对Redux的理解" class="headerlink" title="谈谈你对Redux的理解"></a>谈谈你对Redux的理解</h4><p>使用Redux应该遵循的原则：</p>
<ol>
<li>整个应用共享的state应该存储在store的状态树中，store是唯一的</li>
<li>state不能直接修改，只能通过action表达修改的意图，调用dispatch()修改state</li>
<li>state的修改规则reducers必须是一个纯函数，不能有副作用</li>
</ol>
<h5 id="Redux提供的API"><a href="#Redux提供的API" class="headerlink" title="Redux提供的API"></a>Redux提供的API</h5><ol>
<li><p>createStore<br>createStore的作用就是创建一个Redux，store用来存放应用中所有的state<br>createStore(reducer, [perloadState], [enhancer])<br>createStore方法接受3个参数，后面两个是可选参数<br>reducer: 参数的类型必须是function<br>perloadState: 这个参数代表初始化的state(initialState), 可以是任意类型的参数<br>enhancer: 这个参数代表添加的各种中间件，参数的类型必须是function</p>
</li>
<li><p>combineReducers<br>combineReducers主要是把多个reducer合并成一个，并且返回一个新的reducer函数，该函数接收的参数也是两个state和action</p>
</li>
<li><p>compose<br>主要是在中间件时候使用，合成函数<br>compose(applyMiddleware(thunk),<br> window.devToolsExtension ?<br> window.devToolsExtension() : undefined<br>)</p>
</li>
<li><p>applyMiddleware</p>
</li>
<li><p>bindActionCreator<br>bindActionCreator的主要作用就是将aciton与dispatch函数绑定，生成直接可以出发action的函数</p>
</li>
</ol>
<h4 id="从输入URL到页面加载的全过程"><a href="#从输入URL到页面加载的全过程" class="headerlink" title="从输入URL到页面加载的全过程"></a>从输入URL到页面加载的全过程</h4><ol>
<li>首先，在浏览器地址中输入url</li>
<li>浏览器先查看<strong>浏览器缓存</strong>-系统缓存-路由器缓存，如果缓存中有，会直接在屏幕中显示页面内容。若没有，则跳到第三步操作</li>
<li>浏览器向DNS（Domain Name System）服务器请求解析该URL中的域名对应的IP地址</li>
<li>解析出IP地址后，根据该IP地址和默认端口80，和服务器建立TCP连接</li>
<li>浏览器发出读取文件（URL中域名后面部分对应的文件）的HTTP请求，该请求报文作为TCP三次握手的第三个报文的数据发送给服务器</li>
<li>服务器对浏览器请求做出响应，并把对应的html文本发送给浏览器</li>
<li>释放TCP连接</li>
<li>浏览器将该html文本并显示内容</li>
</ol>
<h4 id="重绘（Repaint）-amp-回流（重排Reflow）"><a href="#重绘（Repaint）-amp-回流（重排Reflow）" class="headerlink" title="重绘（Repaint） &amp; 回流（重排Reflow）"></a>重绘（Repaint） &amp; 回流（重排Reflow）</h4><ol>
<li><p>重绘(repaint)：当我们对DOM的修改导致的样式变化，但未影响几何属性时，浏览器不需要重新计算元素的几何属性，直接可以为该元素绘制新的样式，跳过了回流环节，这个过程就叫重绘。</p>
</li>
<li><p>回流（重排 reflow）：对DOM树进行渲染，只要修改DOM或修改元素的形状大小，就会触发reflow，reflow的时候，浏览器会使已渲染好受到影响的部分失效，并重新构造这部分，完成reflow后，浏览器会重新绘制受影响的部分到屏幕中</p>
</li>
</ol>
<p><strong>回流必定会发生重绘，重绘不一定发生回流</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//  触发Reflow</span><br><span class="line">增加、删除、修改DOM节点时，会导致Reflow或Repaint</span><br><span class="line">移动DOM的位置，或是搞个动画的时候</span><br><span class="line">修改CSS样式的时候（宽、高、内外边距、边框等）</span><br><span class="line">Resize窗口的时候（移动端没有这个问题），或是滚动的时候</span><br><span class="line">改变元素内容（文本或图片等）</span><br><span class="line">修改网页的默认字体时</span><br><span class="line">// 触发Repaint</span><br><span class="line">DOM改动</span><br><span class="line">CSS改动</span><br></pre></td></tr></table></figure>
<h5 id="如何减少回流、重绘？"><a href="#如何减少回流、重绘？" class="headerlink" title="如何减少回流、重绘？"></a>如何减少回流、重绘？</h5><p>减少回流、重绘就是减少对DOM的操作</p>
<p>1.直接改变className，如果动态改变样式，则使用cssText（减少设置多项内联样式）</p>
<p>2.让要操作的元素进行“离线处理”，处理完后一起更新</p>
<p>当使用DocumentFragment进行缓存操作，引发一次回流和重绘</p>
<p>使用display:none 技术，只引发两次回流和重绘</p>
<p>使用cloneNode(true or false)和replaceChild技术，引发一次回流和重绘</p>
<p>3.不要经常访问会引起浏览器flush队列的属性，如果你确实要访问，利用缓存</p>
<p>4.让元素脱离动画流，减少render 树的规模</p>
<p>5.牺牲平滑度换取速度</p>
<p>6.避免使用table布局</p>
<p>7.IE中避免使用javascript表达式</p>
<h4 id="跨域通信的几种方式"><a href="#跨域通信的几种方式" class="headerlink" title="跨域通信的几种方式"></a>跨域通信的几种方式</h4><ol>
<li>JSONP（只支持get请求）</li>
<li>window + hash</li>
<li>window + domain</li>
<li>window + name</li>
<li>postMessage</li>
<li>WebSocket</li>
<li>CORS（Cross-origin resource sharing）跨域资源共享（所有的HTTP请求）</li>
<li>nginx反向代理</li>
<li>http-proxy服务端代理请求</li>
</ol>
<h4 id="前端错误类"><a href="#前端错误类" class="headerlink" title="前端错误类"></a>前端错误类</h4><ol>
<li><p>即时运行错误：代码错误；捕获方式：try…catch…、window.onerror</p>
</li>
<li><p>资源加载错误；object.onerror（不会冒泡 ）、performance.getEntries、Error事件捕获</p>
</li>
</ol>
<h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><ul>
<li>循环遍历</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="string">'ming'</span>, <span class="string">'abc'</span>], <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shallowClone = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dst = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.hasOwnProperty(prop)) &#123;</span><br><span class="line">        dst[prop] = arr[prop];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = shallowClone(arr1);</span><br><span class="line">arr2[<span class="number">2</span>].push(<span class="string">'wuhan'</span>);</span><br><span class="line">arr2[<span class="number">3</span>] = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1);  [<span class="number">1</span>, <span class="number">2</span>, [<span class="string">'ming'</span>, <span class="string">'abc'</span>, <span class="string">'wuhan'</span>], <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr2);  [<span class="number">1</span>, <span class="number">2</span>, [<span class="string">'ming'</span>, <span class="string">'abc'</span>, <span class="string">'wuhan'</span>], <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>object.assign()</li>
<li>Array.prototype.concat()</li>
<li>Array.prototype.slice()</li>
<li>obj展开运算符</li>
</ul>
<h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><ul>
<li>手动递归</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span> (<span class="params">sourceObj, targetObj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cloneObj = targetObj || &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(!sourceObj || <span class="keyword">typeof</span> sourceObj !== <span class="string">"object"</span> || sourceObj.length === <span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> sourceObj</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sourceObj <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">        cloneObj = sourceObj.concat()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> sourceObj)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> sourceObj[i] === <span class="string">'object'</span>) &#123;</span><br><span class="line">                cloneObj[i] = deepClone(sourceObj[i], &#123;&#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cloneObj[i] = sourceObj[i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cloneObj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sourceObj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  c: &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: &#123;</span><br><span class="line">      a: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  d: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello world'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  e: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> targetObj = deepClone(sourceObj, &#123;&#125;)</span><br><span class="line">targetObj.c.b.a = <span class="number">9</span></span><br><span class="line"><span class="built_in">console</span>.log(sourceObj)</span><br><span class="line"><span class="built_in">console</span>.log(targetObj)</span><br></pre></td></tr></table></figure>
<ul>
<li>JSON.parse(JSON.stringify())</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.如果json里面有时间对象，则序列化结果：时间对象=&gt;字符串的形式；</span><br><span class="line">2.如果json里有RegExp、Error对象，则序列化的结果将只得到空对象 RegExp、Error =&gt; &#123;&#125;；</span><br><span class="line">3.如果json里有 function,undefined，则序列化的结果会把 function,undefined 丢失；</span><br><span class="line">4.如果json里有NaN、Infinity和-Infinity，则序列化的结果会变成null；</span><br><span class="line">5.如果json里有对象是由构造函数生成的，则序列化的结果会丢弃对象的 constructor；</span><br><span class="line">6.如果对象中存在循环引用的情况也无法实现深拷贝</span><br></pre></td></tr></table></figure>
<ul>
<li>lodash函数库</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _= <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"><span class="keyword">const</span> obj1 = [</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="string">'Hello!'</span>,</span><br><span class="line">  &#123; <span class="attr">name</span>:<span class="string">'ming1'</span> &#125;,</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">'meng1'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> obj2 = _.cloneDeep(obj1);</span><br><span class="line">obj2[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">obj2[<span class="number">1</span>] = <span class="string">'Hi!'</span>;</span><br><span class="line">obj2[<span class="number">2</span>].name = <span class="string">'ming2'</span></span><br><span class="line">obj2[<span class="number">3</span>][<span class="number">0</span>].name = <span class="string">'meng2'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>call bind apply的区别？js垃圾回收</title>
    <url>/2020/02/26/2020/2%E6%9C%88/0226/</url>
    <content><![CDATA[<h4 id="call-bind-apply的区别？"><a href="#call-bind-apply的区别？" class="headerlink" title="call bind apply的区别？"></a>call bind apply的区别？</h4><blockquote>
<p>call() 和 apply()的第一个参数相同，就是指定的对象。这个对象就是该函数的执行上下文。</p>
</blockquote>
<blockquote>
<p>call()和apply()的区别就在于，两者之间的参数。</p>
</blockquote>
<blockquote>
<p>call()在第一个参数之后的后续所有参数就是传入该函数的值</p>
</blockquote>
<blockquote>
<p>apply()只有两个参数，第一个是对象，第二个是数组，这个数组就是该函数的参数。<br>bind()方法和前两者不同在于：bind()方法会返回执行上下文被改变的函数而不会立即执行，而前两者是直接执行该函数。他的参数和call()相同.</p>
</blockquote>
<h4 id="js垃圾回收"><a href="#js垃圾回收" class="headerlink" title="js垃圾回收"></a>js垃圾回收</h4><p>JavaScript中的内存管理是自动执行的，而且是不可见的。我们创建基本类型、对象、函数….所有这些都需要内存.<br>当不再需要某样东西时会发生什么? JavaScript 引擎是如何发现并清理它?</p>
<p>1）问什么是垃圾</p>
<p>一般来说没有被引用的对象就是垃圾，就是要被清除， 有个例外如果几个对象引用形成一个环，互相引用，但根访问不到它们，这几个对象也是垃圾，也要被清除。</p>
<p>2）如何检垃圾</p>
<ul>
<li>引用计数，有缺陷无法解决循环引用问题</li>
<li>标记清除，目前采用的算法</li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>前端有哪些页面优化方法?</title>
    <url>/2020/02/27/2020/2%E6%9C%88/0227/</url>
    <content><![CDATA[<h4 id="前端有哪些页面优化方法"><a href="#前端有哪些页面优化方法" class="headerlink" title="前端有哪些页面优化方法?"></a>前端有哪些页面优化方法?</h4><ul>
<li><p>减少http请求数</p>
</li>
<li><p>从设计实现层面简化页面，减少元素的使用</p>
</li>
<li><p>合理设置http缓存</p>
</li>
<li><p>资源合并与压缩</p>
</li>
<li><p>合并css图片，减少请求数的又一个好办法</p>
</li>
<li><p>将外部脚本置底（页面信息加载后在加载）</p>
</li>
<li><p>多图页面使用图片懒加载</p>
</li>
<li><p>在js中尽量减少闭包的使用</p>
</li>
<li><p>尽量合并css和js文件</p>
</li>
<li><p>尽量使用字体图标或者svg图标，来代替传统的png等格式图片</p>
</li>
<li><p>减少对dom的操作</p>
</li>
<li><p>尽可能使用事件委托（事件代理）来处理事件绑定的操作</p>
</li>
</ul>
<h4 id="移动端的兼容问题"><a href="#移动端的兼容问题" class="headerlink" title="移动端的兼容问题"></a>移动端的兼容问题</h4><ul>
<li><p>给移动端添加点击事件会有300S的延迟 如果用点击事件，需要引一个fastclick.js文件，解决300s的延迟 一般在移动端用ontouchstart、ontouchmove、ontouchend</p>
</li>
<li><p>移动端点透问题,touchstart 早于 touchend 早于click,click的触发是有延迟的，这个时间大概在300ms左右，也就是说我们tap触发之后蒙层隐藏， 此时 click还没有触发，300ms之后由于蒙层隐藏，我们的click触发到了下面的a链接上<br>尽量都使用touch事件来替换click事件。例如用touchend事件(推荐)。<br>用fastclick，github.com/ftlabs/fast…<br>用preventDefault阻止a标签的click<br>消除 IE10 里面的那个叉号<br>input:-ms-clear{display:none;}</p>
</li>
<li><p>设置缓存 手机页面通常在第一次加载后会进行缓存，然后每次刷新会使用缓存而不是去重新向服务器发送请求。如果不希望使用缓存可以设置no-cache。</p>
</li>
<li><p>圆角BUG 某些Android手机圆角失效 background-clip: padding-box; 防止手机中网页放大和缩小 这点是最基本的，做为手机网站开发者来说应该都知道的，就是设置meta中的viewport</p>
</li>
<li><p>设置用户截止缩放，一般写视口的时候就已经写好了。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>判断数据类型的几种方式</title>
    <url>/2020/02/28/2020/2%E6%9C%88/0228/</url>
    <content><![CDATA[<h3 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h3><h4 id="1-typeof"><a href="#1-typeof" class="headerlink" title="1. typeof"></a>1. typeof</h4><p>返回数据类型，包含这7种： number、boolean、symbol、string、object、undefined、function。</p>
<p>引用类型，除了function返回function类型外，其他均返回object。</p>
<p>其中，null 有属于自己的数据类型 Null ， 引用类型中的 数组、日期、正则 也都有属于自己的具体类型，而 typeof 对于这些类型的处理，只返回了处于其原型链最顶端的 Object 类型，没有错，但不是我们想要的结果。</p>
<h4 id="2-Object-prototype-toString-call"><a href="#2-Object-prototype-toString-call" class="headerlink" title="2. Object.prototype.toString.call()"></a>2. Object.prototype.toString.call()</h4><p>toString() 是 Object 的原型方法，调用该方法，默认返回当前对象的 [[Class]] 。这是一个内部属性，其格式为 [object Xxx] ，其中 Xxx 就是对象的类型。</p>
<p>对于 Object 对象，直接调用 toString()  就能返回 [object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">''</span>) ;   <span class="comment">// [object String]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>) ;    <span class="comment">// [object Number]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>) ; <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Symbol</span>()); <span class="comment">//[object Symbol]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) ; <span class="comment">// [object Undefined]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>) ; <span class="comment">// [object Null]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Function</span>()) ; <span class="comment">// [object Function]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>()) ; <span class="comment">// [object Date]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([]) ; <span class="comment">// [object Array]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">RegExp</span>()) ; <span class="comment">// [object RegExp]console.log(2 instanceof Number);                    // false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>);                <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'str'</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>);                <span class="comment">// false  </span></span><br><span class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>);                    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Function</span>);       <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>);                   <span class="comment">// true    </span></span><br><span class="line"><span class="comment">// console.log(undefined instanceof Undefined);</span></span><br><span class="line"><span class="comment">// console.log(null instanceof Null);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Error</span>()) ; <span class="comment">// [object Error]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">document</span>) ; <span class="comment">// [object HTMLDocument]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">window</span>) ; <span class="comment">//[object global] window 是全局对象 global 的引用</span></span><br></pre></td></tr></table></figure>
<h4 id="3-constructor"><a href="#3-constructor" class="headerlink" title="3. constructor"></a>3. constructor</h4><p>constructor是原型prototype的一个属性，当函数被定义时候，js引擎会为函数添加原型prototype，并且这个prototype中constructor属性指向函数引用， 因此重写prototype会丢失原来的constructor。</p>
<h5 id="不过这种方法有问题："><a href="#不过这种方法有问题：" class="headerlink" title="不过这种方法有问题："></a>不过这种方法有问题：</h5><p>1：null 和 undefined 无constructor，这种方法判断不了。</p>
<p>2：还有，如果自定义对象，开发者重写prototype之后，原有的constructor会丢失，因此，为了规范开发，在重写对象原型时一般都需要重新给 constructor 赋值，以保证对象实例的类型不被篡改。</p>
<p><img src="./img/constructor.png" alt="avatar"></p>
<h4 id="4-instanceof"><a href="#4-instanceof" class="headerlink" title="4. instanceof"></a>4. instanceof</h4><p>instanceof 是用来判断 A 是否为 B 的实例，表达式为：A instanceof B，如果 A 是 B 的实例，则返回 true,否则返回 false。 在这里需要特别注意的是：instanceof 检测的是原型，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>);       <span class="comment">//  false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'str'</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>);   <span class="comment">//  false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>);   <span class="comment">//  false</span></span><br><span class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>);       <span class="comment">//  true</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>);      <span class="comment">//  true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Function</span>)  <span class="comment">//  true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> <span class="keyword">instanceof</span> Undefined);  <span class="comment">//  true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> <span class="keyword">instanceof</span> Null);      <span class="comment">//  true</span></span><br></pre></td></tr></table></figure>
<p>在这里字面量值，2，true，’str’不是实例，所以判断为false。</p>
<p><img src="./img/instanceof.png" alt="avatar"></p>
<p>由上图可以看出[]的原型指向Array.prototype，间接指向Object.prototype, 因此 [] instanceof Array 返回true， [] instanceof Object 也返回true。</p>
<p>instanceof 只能用来判断两个对象是否属于实例关系， 而不能判断一个对象实例具体属于哪种类型。</p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是babel?</title>
    <url>/2020/03/02/2020/3%E6%9C%88/0302/</url>
    <content><![CDATA[<h3 id="什么是babel"><a href="#什么是babel" class="headerlink" title="什么是babel?"></a>什么是babel?</h3><p>官方的解释 Babel 是一个 JavaScript 编译器，用于将 ECMAScript 2015+ 版本的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前版本和旧版本的浏览器或其他环境中。简单来说 Babel 的工作就是：</p>
<ul>
<li>语法转换</li>
<li>通过Polyfill的方式在目标环境中添加缺失的特性</li>
<li>JS源码转换</li>
</ul>
<h3 id="babel的基本原理"><a href="#babel的基本原理" class="headerlink" title="babel的基本原理"></a>babel的基本原理</h3><p>原理很简单，核心就是 AST (抽象语法树)。首先将源码转成抽象语法树，然后对语法树进行处理生成新的语法树，最后将新语法树生成新的 JS 代码，整个编译过程可以分为 3 个阶段 parsing (解析)、transforming (转换)、generating (生成)，都是在围绕着 AST 去做文章，话不多说上图：</p>
<p>Babel 只负责编译新标准引入的新语法，比如 Arrow function、Class、ES Module 等，它不会编译原生对象新引入的方法和 API，比如 Array.includes，Map，Set 等，这些需要通过 Polyfill 来解决</p>
<h3 id="babel的使用"><a href="#babel的使用" class="headerlink" title="babel的使用"></a>babel的使用</h3><h5 id="运行babel所需的基本环境"><a href="#运行babel所需的基本环境" class="headerlink" title="运行babel所需的基本环境"></a>运行babel所需的基本环境</h5><ol>
<li><p>babel/cli</p>
</li>
<li><p>babel/core</p>
</li>
</ol>
<h5 id="配置babel"><a href="#配置babel" class="headerlink" title="配置babel"></a>配置babel</h5><ol>
<li><p>babel.config.js</p>
</li>
<li><p>.babelrc</p>
</li>
<li><p>babelrc.js</p>
</li>
<li><p>package.json</p>
</li>
</ol>
<p>四种配置方式作用都一样，你就合着自己的口味来，那种看着顺眼，你就翻它。</p>
<h3 id="插件-Plugins"><a href="#插件-Plugins" class="headerlink" title="插件(Plugins)"></a>插件(Plugins)</h3><p>插件使用来定义如何转换你的代码的。在babel的配置项中填写需要使用的插件名称，babel在编译的时候就会去加载node_modules中对应的npm包，然后编译插件对应的语法。</p>
<p>.babelrc</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    <span class="string">"transform-decorators-legacy"</span>,</span><br><span class="line">    <span class="string">"transform-class-properties"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="插件执行顺序"><a href="#插件执行顺序" class="headerlink" title="插件执行顺序"></a>插件执行顺序</h5><p>插件在预设(persets)前运行。</p>
<p>插件的执行顺序是从左往右执行。也就是说在上面的示例中，babel在进行AST遍历的时候会先调用transform-decorators-legacy插件中定义的转换方法，然后再调用transform-class-properties中的方法。</p>
<h5 id="插件传参"><a href="#插件传参" class="headerlink" title="插件传参"></a>插件传参</h5><p>参数是由插件名称和参数对象组成的一个数组</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">"import"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"libraryName"</span>: <span class="string">"antd"</span>,</span><br><span class="line">            <span class="attr">"libraryDirectory"</span>: <span class="string">"es"</span>,</span><br><span class="line">            <span class="attr">"style"</span>: <span class="string">"css"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="插件名称"><a href="#插件名称" class="headerlink" title="插件名称"></a>插件名称</h5><p>插件名称如果为 @babel/plugin-xxx，可以使用短名称@babel/xx，如果为babel-plugin-xx，可以直接使用xx。</p>
<h5 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h5><h3 id="预设-Presets"><a href="#预设-Presets" class="headerlink" title="预设(Presets)"></a>预设(Presets)</h3><p>预设就是一堆插件(Plugin)的组合，从而达到某种转译的能力，就比如react中使用到的@babel/perset-react，他就是下面几种插件的组合。</p>
<ul>
<li>@babel/plugin-syntax-jsx</li>
<li>@babel/plugin-transform-react-jsx</li>
<li>@babel/plugin-transform-react-display-name</li>
</ul>
<p>当然我们也可以手动的在plugins中配置一系列的plugin来达到目的，就像这样：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    <span class="string">"@babel/plugin-syntax-jsx"</span>,</span><br><span class="line">    <span class="string">"@babel/plugin-transform-react-jsx"</span>,</span><br><span class="line">    <span class="string">"@babel/plugin-transform-react-display-name"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是这样一方面显得不那么优雅，另一方面增加了使用者的使用难度。如果直接使用预设就清新脱俗多了~</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"persets"</span>: [</span><br><span class="line">    <span class="string">"@babel/preset-react"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="预设-Presets-的执行顺序"><a href="#预设-Presets-的执行顺序" class="headerlink" title="预设(Presets)的执行顺序"></a>预设(Presets)的执行顺序</h5><p>前面提到插件的执行顺序是从左往右，而预设的执行顺序恰好反其道行之，它是从右往左。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"a"</span>,</span><br><span class="line">    <span class="string">"b"</span>,</span><br><span class="line">    <span class="string">"c"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它的执行顺序是 c、b、a，是不是有点奇怪，这主要是为了确保向后兼容，因为大多数用户将 “es2015” 放在 “stage-0” 之前。</p>
<h5 id="自定义预设-Presets"><a href="#自定义预设-Presets" class="headerlink" title="自定义预设(Presets)"></a>自定义预设(Presets)</h5><h5 id="那些她认识你而你不认识她的预设-Presets"><a href="#那些她认识你而你不认识她的预设-Presets" class="headerlink" title="那些她认识你而你不认识她的预设(Presets)"></a>那些她认识你而你不认识她的预设(Presets)</h5><ol>
<li>@babel/preset-stage-xxx</li>
</ol>
<p>@babel/perset-stage-xxx 是ES在不同阶段语法提案的转码规则而产生的预设，随着被批准为ES新版本的组成部分而进行相应的改变（例如ES6/ES2015）。</p>
<p>提案分为以下几个阶段：</p>
<ul>
<li>stage-0，设想：只是一个想法，可能有babel插件，stage-0的功能范围最广，包含stage-1，stage-2，stage-3的所有功能</li>
<li>stage-1，建议：这是值得跟进的</li>
<li>stage-2，草案：初始规范</li>
<li>stage-3，候选：完成规范并在浏览器上初步实现</li>
<li>stage-4，完成：将添加到下一个年度版本发布中</li>
</ul>
<ol start="2">
<li>@babel-preset-es2015</li>
</ol>
<p>preset-es2015是仅包含ES6功能的Babel预设。</p>
<p>实际上在babel7出来后上面提到的这些预设stage-x，preset-es2015都可以废弃了，因为@bael/preset-env出来一统江湖了。</p>
<ol start="3">
<li>@babel/preset-env</li>
</ol>
<p>前面两个预设是从ES标准的维度来确定转码规则的，而@babel/preset-env是根据浏览器的不同版本中缺失的功能确定转换规则的，在配置的时候我们只需要配置需要支持的浏览器版本就好了，@babel/preset-env会<br>根据目标浏览器生成对应的插件列表然后进行编译：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"presets"</span>: [</span><br><span class="line">   [<span class="string">"env"</span>, &#123;</span><br><span class="line">     <span class="attr">"targets"</span>: &#123;</span><br><span class="line">       <span class="attr">"browser"</span>: [<span class="string">"last 10 versions"</span>, <span class="string">"ie &gt;= 9"</span>]</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;],</span><br><span class="line"> ],</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在默认情况下@babel/preset-env支持将JS目前最新的语法转成ES5，但需要注意的是，如果你代码中用到了还没有成为JS标准的语法，该语法暂时还处于stage阶段，这个时候还是需要安装对应的stage预设，不然编译会报错。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"presets"</span>: [</span><br><span class="line">   [<span class="string">"env"</span>, &#123;</span><br><span class="line">     <span class="attr">"targets"</span>: &#123;</span><br><span class="line">       <span class="attr">"browsers"</span>: [<span class="string">"last 10 versions"</span>, <span class="string">"ie &gt;= 9"</span>]</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;],</span><br><span class="line"> ],</span><br><span class="line"> <span class="attr">"stage-0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然可以采用默认配置，但如果不需要照顾所有的浏览器，还是建议你配置目标浏览器和环境，这样可以保证编译后的代码体积足够小，因为在有的版本浏览器中，新语法本身就能执行，不需要编译。@babel/preset-env 在默认情况下和 preset-stage-x 一样只编译语法，不会对新方法和新的原生对象进行转译，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrFun = <span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p>转换后</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrFun = <span class="function"><span class="keyword">function</span> <span class="title">arrFun</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>箭头函数被转换了，但是 Array.includes 方法，并没有被处理，这个时候要是程序跑在低版本的浏览器上，就会出现 includes is not function 的错误。这个时候就需要 polyfill 闪亮登场了。</p>
<h3 id="Polyfill"><a href="#Polyfill" class="headerlink" title="Polyfill"></a>Polyfill</h3><p>polyfill 的翻译过来就是垫片，垫片就是垫平不同浏览器环境的差异，让大家都一样。</p>
<h5 id="babel-polyfill-模块可以模拟完整的ES5环境。-babel7-4以上版本已经弃用，可以用core-js代替"><a href="#babel-polyfill-模块可以模拟完整的ES5环境。-babel7-4以上版本已经弃用，可以用core-js代替" class="headerlink" title="@babel/polyfill 模块可以模拟完整的ES5环境。 babel7.4以上版本已经弃用，可以用core-js代替"></a>@babel/polyfill 模块可以模拟完整的ES5环境。 babel7.4以上版本已经弃用，可以用core-js代替</h5><p>注意 @babel/polyfill 不是在 Babel 配置文件中配置，而是在我们的代码中引入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@babel/polyfill'</span>;</span><br><span class="line"><span class="keyword">const</span> arrFun = <span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
<p>这样在低版本的浏览器中也能正常运行了。</p>
<p>使用core-js代替，不需要在文件中引入@babel/polyfill</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"@babel/preset-flow"</span>,</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"targets"</span>: &#123;</span><br><span class="line">          <span class="attr">"node"</span>: <span class="string">"8.10"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        "corejs": "3", // 声明 corejs 版本</span><br><span class="line">        "useBuiltIns": "usage"</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ECMAScript-和-JavaScript-的关系"><a href="#ECMAScript-和-JavaScript-的关系" class="headerlink" title="ECMAScript 和 JavaScript 的关系"></a>ECMAScript 和 JavaScript 的关系</h4><p>ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。</p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 观察者模式与发布订阅模式</title>
    <url>/2020/03/06/2020/3%E6%9C%88/0306/</url>
    <content><![CDATA[<h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p>观察者模式定义了对象间一种一对多的依赖关系，当目标对象Subject的状态发生改变时，所有依赖它的对象ObServe都会得到通知。</p>
<p>模式特征：</p>
<p>一个目标者对象Subject，拥有方法：添加/删除/通知ObServer；</p>
<p>多个观察者对象ObServe，拥有方法：接收Subject状态变更通知并处理；</p>
<p>目标对象Subject状态变更时，通知所有ObServer。</p>
<p>Subject添加一系列ObServer，Subject负责维护与这些ObServe之间的联系，</p>
<p>代码实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.observers = [];  <span class="comment">//  观察者列表</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  添加</span></span><br><span class="line">  add(observer) &#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.push(observer);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  删除</span></span><br><span class="line">  remove(observer) &#123;</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="keyword">this</span>.observers.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item === observer);</span><br><span class="line">    idx &gt; <span class="number">-1</span> &amp;&amp; <span class="keyword">this</span>.observers.splice(idx, <span class="number">1</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//  通知</span></span><br><span class="line">  notify() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> observer <span class="keyword">of</span> observers) &#123;</span><br><span class="line">      observer.update();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObServer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  update() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`收到通知：<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  实例化目标者</span></span><br><span class="line"><span class="keyword">let</span> subject = <span class="keyword">new</span> Subject();</span><br><span class="line"><span class="comment">//  实例化两个观察者</span></span><br><span class="line"><span class="keyword">let</span> obs1 = <span class="keyword">new</span> ObServer(<span class="string">'前端开发者'</span>);</span><br><span class="line"><span class="keyword">let</span> obs2 = <span class="keyword">new</span> ObServer(<span class="string">'后端开发者'</span>);</span><br><span class="line"><span class="comment">//  向目标者添加观察者</span></span><br><span class="line">subject.add(obs1);</span><br><span class="line">subject.add(obs2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  目标者通知更新</span></span><br><span class="line">subject.notify();</span><br><span class="line"></span><br><span class="line"><span class="comment">//  输出：</span></span><br><span class="line"><span class="comment">//  收到通知：前端开发者</span></span><br><span class="line"><span class="comment">//  收到通知：后端开发者</span></span><br></pre></td></tr></table></figure>
<p>优势：目标者与观察者，功能耦合度降低，专注自身功能逻辑；观察者被动接收更新，时间上解耦，实时接收目标者更新状态。<br>缺点：观察者模式虽然实现了对象间依赖关系的低耦合，但却不能对事件通知进行细分管控，如”筛选通知“，”指定主题事件通知“。</p>
<h4 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h4><p>发布订阅模式基于一个事件（主题）通道，希望接收通知的对象Subscriber通过自定义事件订阅主题，被激活事件的对象Publisher通过发布主题事件的方式通知各个订阅该主题的subscriber对象。</p>
<p>代码实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  事件中心</span></span><br><span class="line"><span class="keyword">let</span> pubSub = &#123;</span><br><span class="line">  list: &#123;&#125;,</span><br><span class="line">  <span class="comment">//  订阅</span></span><br><span class="line">  subscribe: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.list[key]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.list[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.list[key].push(fn);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//  发布</span></span><br><span class="line">  publish: <span class="function"><span class="keyword">function</span>(<span class="params">key, ...arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> fn <span class="keyword">of</span> <span class="keyword">this</span>.list[key]) &#123;</span><br><span class="line">      fn.call(<span class="keyword">this</span>, ...arg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//  取消订阅</span></span><br><span class="line">  unSubscribe: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fnList = <span class="keyword">this</span>.list[key];</span><br><span class="line">    <span class="keyword">if</span> (!fnList) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">      <span class="comment">//  不传入指定取消的订阅方法，则清空所有key下的订阅</span></span><br><span class="line">      fnList &amp;&amp; (fnList.length === <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fnList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item === fn) &#123;</span><br><span class="line">          fnList.splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  订阅</span></span><br><span class="line">pubSub.subscribe(<span class="string">'onwork'</span>, time =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`上班了：<span class="subst">$&#123;time&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br><span class="line">pubSub.subscribe(<span class="string">'offwork'</span>, time =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`下班了：<span class="subst">$&#123;time&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//  发布</span></span><br><span class="line">pubSub.publish(<span class="string">'onwork'</span>, <span class="string">'9:00:00'</span>);</span><br><span class="line">pubSub.publish(<span class="string">'offwork'</span>, <span class="string">'18:00:00'</span>);</span><br><span class="line"><span class="comment">//  取消订阅</span></span><br><span class="line">pubSub.unSubscribe(<span class="string">'onwork'</span>);</span><br></pre></td></tr></table></figure>
<p>发布订阅模式中，订阅者各自实现不同的逻辑，且只接受自己对应的事件通知。实现你想要的 “不一样”。</p>
<p>DOM 事件监听也是 “发布订阅模式” 的应用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> loginBtn = <span class="built_in">document</span>.getElementById(<span class="string">'#loginBtn'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  监听回调函数（指定事件）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notifyClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'点击'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  添加事件监听</span></span><br><span class="line">loginBtn.addEventListener(<span class="string">'click'</span>, notifyClick);</span><br><span class="line"><span class="comment">//  触发点击，事件中心派发指定事件</span></span><br><span class="line">loginBtn.click();</span><br><span class="line"></span><br><span class="line"><span class="comment">//  取消事件监听</span></span><br><span class="line">loginBtn.removeEventListener(<span class="string">'click'</span>, notifyClick);</span><br></pre></td></tr></table></figure>
<p>发布订阅的通知顺序：</p>
<p>先订阅后发布时才通知（常规）</p>
<p>订阅后可获取过往以后的发布通知 （QQ离线消息，上线后获取之前的信息）</p>
<p>流行库的应用</p>
<p>jQuery 的 on 和 trigger，$.callback();</p>
<p>Vue 的双向数据绑定；</p>
<p>Vue 的父子组件通信 $on/$emit</p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>面经</title>
    <url>/2020/03/10/2020/3%E6%9C%88/0310-01/</url>
    <content><![CDATA[<h4 id="说说你对JS模块化的理解"><a href="#说说你对JS模块化的理解" class="headerlink" title="说说你对JS模块化的理解"></a>说说你对JS模块化的理解</h4><p>模块化就是将一个大的功能拆分为多个块，每一个块都是独立的，你不需要去担心污染全局变量，命名冲突什么的。</p>
<p>那么模块化的好处也就显然易见了</p>
<ul>
<li>解决命名冲突</li>
<li>依赖管理</li>
<li>代码更加可读</li>
<li>提高复用性</li>
</ul>
<p>js设计之初并没有模块化的概念，所以原始时代只能通过自执行函数来设计模块化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myModule = (<span class="function"><span class="keyword">function</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  private</span></span><br><span class="line">  <span class="keyword">var</span> moduleName = <span class="string">'module'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  public</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setModuleName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    moduleName = name;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//  public</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getModuleName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> moduleName;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;setModuleName, getModuleName&#125;;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>
<p>它通过闭包的特性打开了一个新的作用域，缓解了全局作用域命名冲突和安全性的问题。但是，开发者并不能够用它来组织和拆分代码，于是乎便出现了以此为基石的模块化规范。</p>
<h5 id="1-CommonJs规范（同步加载模块）"><a href="#1-CommonJs规范（同步加载模块）" class="headerlink" title="1. CommonJs规范（同步加载模块）"></a>1. CommonJs规范（同步加载模块）</h5><ul>
<li>允许模块通过require的方法来同步加载所要依赖的其他模块，然后通过exports或module.exports来导出需要暴露的接口</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  a.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">exports.a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  b.js</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = <span class="built_in">require</span>(<span class="string">'./a.js'</span>);</span><br><span class="line"><span class="built_in">module</span>.a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// require函数同步加载了a.js，并且返回了module.exports输出字面量的拷贝值。</span></span><br></pre></td></tr></table></figure>
<ul>
<li>优点：</li>
</ul>
<blockquote>
<ol>
<li>简单容易使用</li>
<li>服务器端模块便于复用</li>
</ol>
</blockquote>
<ul>
<li>缺点：</li>
</ul>
<blockquote>
<ol>
<li>同步加载的方式不适合在浏览器环境中使用，同步意味着阻塞加载，浏览器资源是异步加载</li>
<li>不能非阻塞的并行加载多个模块</li>
</ol>
</blockquote>
<h5 id="2-AMD（异步加载模块）"><a href="#2-AMD（异步加载模块）" class="headerlink" title="2. AMD（异步加载模块）"></a>2. AMD（异步加载模块）</h5><p>区别于CommonJS，AMD规范的被依赖模块是异步加载的，而定义的模块是被当作回调函数来执行的，依赖于require.js模块管理工具库。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    a.do();</span><br><span class="line">    b.do();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h5 id="3-CMD（异步加载模块）"><a href="#3-CMD（异步加载模块）" class="headerlink" title="3. CMD（异步加载模块）"></a>3. CMD（异步加载模块）</h5><p>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。AMD 推崇依赖前置，CMD 推崇依赖就近。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line">  a.doSomething();</span><br><span class="line">  <span class="comment">// 异步加载一个模块，在加载完成时，执行回调</span></span><br><span class="line">  <span class="built_in">require</span>.async([<span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">    b.doSomething();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 对外暴露成员</span></span><br><span class="line">  exports.doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用模块</span></span><br><span class="line">seajs.use(<span class="string">'path'</span>);</span><br></pre></td></tr></table></figure>
<h5 id="4-ES6-module"><a href="#4-ES6-module" class="headerlink" title="4. ES6 module"></a>4. ES6 module</h5><p>ES6的模块化已经不是规范了，而是JS语言的特性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入的语法就这样 import，XXX 这里有很多语法变化</span></span><br><span class="line"><span class="keyword">import</span> XXX <span class="keyword">from</span> <span class="string">'./a.js'</span></span><br><span class="line"><span class="comment">// 导出也有很多语法变化的写法，基本的就这两个，反正语法没什么难得</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>随着ES6的推出，AMD和CMD也随之成为了历史。ES6模块与模块化规范相比，有两大特点：</p>
<ul>
<li>模块化规范输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li>
<li>模块化规范是运行时加载，ES6 模块是编译时输出接口。</li>
</ul>
<p>commonJs</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  count,</span><br><span class="line">  add,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> v = <span class="built_in">require</span>(<span class="string">'./common'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(v.count); <span class="comment">// 1</span></span><br><span class="line">v.add();</span><br><span class="line"><span class="built_in">console</span>.log(v.count); <span class="comment">//  1</span></span><br></pre></td></tr></table></figure>
<p>ES6</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  count,</span><br><span class="line">  add</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> v <span class="keyword">from</span> <span class="string">'./common'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(v.count); <span class="comment">//  1</span></span><br><span class="line">v.add();</span><br><span class="line"><span class="built_in">console</span>.log(v.count); <span class="comment">//  2</span></span><br></pre></td></tr></table></figure>
<h4 id="如何理解原型？如何理解原型链？"><a href="#如何理解原型？如何理解原型链？" class="headerlink" title="如何理解原型？如何理解原型链？"></a>如何理解原型？如何理解原型链？</h4><ul>
<li>prototype<br>这是一个显式原型属性，任何一个对象都有原型，但是有一个例外</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fun = <span class="built_in">Function</span>.prototype.bind();</span><br></pre></td></tr></table></figure>
<p>如果你已上述方法创建一个函数，那么可以发现这个函数不具有prototype属性。</p>
<p><strong>prototype 如何产生的</strong><br>当我们声明一个函数时，这个属性就被自动创建了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>并且这个属性的值是一个对象（也就是原型），只有一个属性constructor</p>
<ul>
<li><p>constructor<br>constructor 是一个公有且不可枚举的tag_release_20200514_003属性。一旦我们改变了函数的prototype，那么新对象就没有这个属性了（当然可以通过原型链取到constructor）</p>
</li>
<li><p>__proto__<br>这是每个对象都有的隐式原型属性，指向了创建该对象的构造函数的原型。其实这个属性指向了 [[prototype]]，但是 [[prototype]] 是内部属性，我们并不能访问到，所以使用 __proto__ 来访问。</p>
</li>
</ul>
<p>**实例对象的 __proto__ 如何产生的</p>
<p>当我们使用 new 操作符时，生成的实例对象拥有了 <em>proto</em>属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">//  这个函数是 Function的实例对象</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  纯对象的原型</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125;.__proto__); <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stu = <span class="keyword">new</span> Student(<span class="string">'wang'</span>);</span><br><span class="line"><span class="comment">//  Student 类型实例的原型，默认也是一个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(stu.__proto__); <span class="comment">//  &#123; constructor: f &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(stu.__proto__.constructor); <span class="comment">//  Student(name, age) &#123; this.name = name &#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="new做了什么，new的模拟实现"><a href="#new做了什么，new的模拟实现" class="headerlink" title="new做了什么，new的模拟实现"></a>new做了什么，new的模拟实现</h4><ol>
<li>创建了一个全新的对象。</li>
<li>这个对象会被执行[[Prototype]]（也就是<strong>proto</strong>）链接。</li>
<li>生成的新对象会绑定到函数调用的this。</li>
<li>通过new创建的每个对象将最终被[[Prototype]]链接到这个函数的prototype对象上。</li>
<li>如果函数没有返回对象类型Object(包含Functoin, Array, Date, RegExg, Error)，那么new表达式中的函数调用会自动返回这个新的对象。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟实现 new 操作符</span></span><br><span class="line"><span class="comment"> * @param  &#123;Function&#125; ctor [构造函数]</span></span><br><span class="line"><span class="comment"> * @return &#123;Object|Function|Regex|Date|Error&#125;      [返回结果]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个空的对象</span></span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">    <span class="comment">// 获得构造函数</span></span><br><span class="line">    <span class="keyword">let</span> Con = [].shift.call(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="comment">// 链接到原型</span></span><br><span class="line">    obj.__proto__ = Con.prototype</span><br><span class="line">    <span class="comment">// 绑定 this，执行构造函数</span></span><br><span class="line">    <span class="keyword">let</span> result = Con.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="comment">// 确保 new 出来的是个对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result : obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="谈谈小程序的登录授权"><a href="#谈谈小程序的登录授权" class="headerlink" title="谈谈小程序的登录授权"></a>谈谈小程序的登录授权</h4><p>1.调用 wx.login() 获取 临时登录凭证code ，并回传到开发者服务器。</p>
<p>2.调用 code2Session 接口，换取 用户唯一标识 OpenID 和 会话密钥 session_key。</p>
<h4 id="vue的几种传参方式"><a href="#vue的几种传参方式" class="headerlink" title="vue的几种传参方式"></a>vue的几种传参方式</h4><ul>
<li><p>props</p>
</li>
<li><p>vuex</p>
</li>
<li><p>$parent</p>
</li>
<li><p>$children</p>
</li>
<li><p>provide-inject</p>
</li>
</ul>
<p>…项目相关</p>
]]></content>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>如何实现ajax</title>
    <url>/2020/03/10/2020/3%E6%9C%88/0310/</url>
    <content><![CDATA[<h4 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h4><blockquote>
<p>ajax是异步的JavaScript和XML。ajax是一种通过在后台与服务器进行少量数据交换，在无需重新加载整个网页的情况下，更新部分网页的技术</p>
</blockquote>
<h4 id="如何实现ajax"><a href="#如何实现ajax" class="headerlink" title="如何实现ajax"></a>如何实现ajax</h4><ol>
<li><p>创建XMLHttpRequest实例。通过创建一个XMLHttpRequest对象得到一个实例，调用实例的open()方法为这次ajax请求设定相应的HTTP方法，相应的地址以及是否异步。</p>
</li>
<li><p>发送http请求。调用spen()方法发送请求，其可以接收一个参数，既要作为请求主体所发送的数据。</p>
</li>
<li><p>接收服务器相应数据。监听readystatechange事件，通过该实例的readystate属性来判断请求状态，其分为0，1，2，3，4五种状态</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>onreadystatechange</td>
<td>存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</td>
</tr>
<tr>
<td>readyState</td>
<td>存有XMLHttpRequest的状态。从0到4发生变化。<br><em> 0: 请求未初始化<br></em> 1: 已建立连接 <br> <em> 2: 请求已接收<br> </em> 3: 请求处理中 <br> * 4: 请求已完成，且响应已就绪</td>
</tr>
<tr>
<td>status</td>
<td>200: “OK”<br>404: 未找到页面</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">  xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">&#125;</span><br><span class="line">xhr.onreadystatechange(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.redayState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseXml);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'www.xxxx.com/xxx/xxx'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS数据类型</title>
    <url>/2020/03/13/2020/3%E6%9C%88/0313-01/</url>
    <content><![CDATA[<h2 id="原始-Primitive-类型"><a href="#原始-Primitive-类型" class="headerlink" title="原始(Primitive)类型"></a>原始(Primitive)类型</h2><p>在JS中，存在6种原始值，分别是：</p>
<ul>
<li>number</li>
<li>string</li>
<li>boolean</li>
<li>null</li>
<li>undefined</li>
<li>symbol</li>
<li>bigInt</li>
</ul>
<p>首先原始类型存储的都是值，是没有函数可以调用的，比如undefined.toString()</p>
<p>此时你肯定会有疑问，这不对啊，明明’1’.toString()是可以使用的。其实在这种情况下，’1’已经不是原始类型了，而是被强制转换成了String类型也就是对象类型，所以可以调用tostring函数。</p>
<p>另外对于null来说，很多人会认为它是个对象类型，其实这是错的。虽然typeof null会输出object，但是这是JS存在的一个历史bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。</p>
<h2 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h2><p>在JS中，除了原始类型就是对象类型了。对象类型和原始类型的不同的是，原始类型存储的是值，对象类型存储的地址（指针）。当你创建了一个对象类型的时候，计算机会在内存中帮我们开辟一个空间来存放值，但是我们需要找到这个空间，这个空间会拥有一个地址（指针）。</p>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>首先我们要知道，在 JS 中类型转换只有三种情况，分别是：</p>
<ul>
<li>转换为布尔值</li>
<li>转换为数字</li>
<li>转换为字符串</li>
</ul>
<h4 id="转Boolean"><a href="#转Boolean" class="headerlink" title="转Boolean"></a>转Boolean</h4><p>在条件判断时，除了 undefined， null， false， NaN， ‘’， 0， -0，其他所有值都转为 true，包括所有对象。</p>
<h4 id="对象转原始类型"><a href="#对象转原始类型" class="headerlink" title="对象转原始类型"></a>对象转原始类型</h4><p>对象在转换类型的时候，会调用内置的 [[ToPrimitive]] 函数，对于该函数来说，算法逻辑一般来说如下：</p>
<ul>
<li>如果是原始类型，那就不需要转换</li>
<li>如果需要转字符串类型那就调用x.toString()，转换为基础类型的话就会返回转换的值。不是字符串类型的话就先调用valueOf，如果不是基础类型的话在调用toString。</li>
<li>调用x.valueOf()，如果转换为基础类型，就返回基础类型。</li>
<li>如果都没有返回原始类型，就会报错。</li>
</ul>
<p>当然你也可以重写 Symbol.toPrimitive，该方法在转原始类型时调用优先级最高。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  valueOf() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'1'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="built_in">Symbol</span>.toPrimitive]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + a);  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如何实现 a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3返回true</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> a.value++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span></span><br></pre></td></tr></table></figure>
<h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><ul>
<li>如果是对象，就通过 toPrimitive 转成原始类型</li>
<li>如果是字符串，就通过 unicode 字符索引来比较</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  valueOf() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'1'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a &gt; <span class="number">-1</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>前端安全问题</title>
    <url>/2020/03/15/2020/3%E6%9C%88/0315-01/</url>
    <content><![CDATA[<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>XSS 简单点来说，就是攻击者想尽一切办法将可以执行的代码注入到网页中。<br>XSS 可以分为多种类型，但是总体上我认为分为两类：持久型和非持久型。</p>
<p>持久型也就是攻击的代码被服务端写入进数据库中，这种攻击危害性很大，因为如果网站访问量很大的话，就会导致大量正常访问页面的用户都受到攻击。</p>
<p>举个例子，对于评论功能来说，就得防范持久型 XSS 攻击，因为我可以在评论中输入以下内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="number">1</span>);<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>非持久型相比于前者危害就小的多了，一般通过修改 URL 参数的方式加入攻击代码，诱导用户访问链接从而进行攻击。</p>
<p>举个例子，如果页面需要从 URL 中获取某些参数作为内容的话，不经过过滤就会导致攻击代码被执行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- http://www.domain.com?name=&lt;script&gt;alert(1)&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是对于这种攻击方式来说，如果用户使用 Chrome 这类浏览器的话，浏览器就能自动帮助用户防御攻击。但是我们不能因此就不防御此类攻击了，因为我不能确保用户都使用了该类浏览器。</p>
<p>对于 XSS 攻击来说，通常有两种方式可以用来防御。</p>
<h5 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h5><p>首先，对于用户的输入应该是永远不信任的。最普遍的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  str = str.replace(<span class="regexp">/&amp;/g</span>, <span class="string">'&amp;amp;'</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt;'</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quto;'</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/'/g</span>, <span class="string">'&amp;#39;'</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/`/g</span>, <span class="string">'&amp;#96;'</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/\//g</span>, <span class="string">'&amp;#x2F;'</span>)</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h5><p>CSP 本质上就是建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击。</p>
<p>通常可以通过两种方式来开启 CSP：</p>
<ol>
<li>设置 HTTP Header 中的 Content-Security-Policy</li>
<li>设置 meta 标签的方式 <meta http-equiv="Content-Security-Policy"></li>
</ol>
<hr>
<h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>CSRF 中文名为跨站请求伪造。原理就是攻击者构造出一个后端请求地址，诱导用户点击或者通过某些途径自动发起请求。如果用户是在登录状态下的话，后端就以为是用户在操作，从而进行相应的逻辑。</p>
<p>举个例子，假设网站中有一个通过 GET 请求提交用户评论的接口，那么攻击者就可以在钓鱼网站中加入一个图片，图片的地址就是评论接口</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.domain.com/xxx?comment='attack'"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>那么你是否会想到使用 POST 方式提交请求是不是就没有这个问题了呢？其实并不是，使用这种方式也不是百分百安全的，攻击者同样可以诱导用户进入某个页面，在页面中通过表单提交 POST 请求。</p>
<h5 id="如何防御"><a href="#如何防御" class="headerlink" title="如何防御"></a>如何防御</h5><p>防范 CSRF 攻击可以遵循以下几种规则：</p>
<ol>
<li>Get 请求不对数据进行修改</li>
<li>不让第三方网站访问到用户 Cookie</li>
<li>阻止第三方网站请求接口</li>
<li>请求时附带验证信息，比如验证码或者 Token</li>
</ol>
<h5 id="SameSite"><a href="#SameSite" class="headerlink" title="SameSite"></a>SameSite</h5><p>可以对 Cookie 设置 SameSite 属性。该属性表示 Cookie 不随着跨域请求发送，可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。</p>
<h5 id="验证-Referer"><a href="#验证-Referer" class="headerlink" title="验证 Referer"></a>验证 Referer</h5><p>对于需要防范 CSRF 的请求，我们可以通过验证 Referer 来判断该请求是否为第三方网站发起的。</p>
<h5 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h5><p>服务器下发一个随机 Token，每次发起请求时将 Token 携带上，服务器验证 Token 是否有效。</p>
<hr>
<h3 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h3><p>点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，在页面中透出一个按钮诱导用户点击。</p>
<p>对于这种攻击方式，推荐防御的方法有两种。</p>
<h5 id="X-FRAME-OPTIONS"><a href="#X-FRAME-OPTIONS" class="headerlink" title="X-FRAME-OPTIONS"></a>X-FRAME-OPTIONS</h5><p>X-FRAME-OPTIONS 是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 iframe 嵌套的点击劫持攻击。</p>
<p>该响应头有三个值可选，分别是</p>
<ul>
<li>DENY，表示页面不允许通过 iframe 的方式展示</li>
<li>SAMEORIGIN，表示页面可以在相同域名下通过 iframe 的方式展示</li>
<li>ALLOW-FROM，表示页面可以在指定来源的 iframe 中展示</li>
</ul>
<h5 id="JS-防御"><a href="#JS-防御" class="headerlink" title="JS 防御"></a>JS 防御</h5><p>对于某些远古浏览器来说，并不能支持上面的这种方式，那我们只有通过 JS 的方式来防御点击劫持了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">id</span>=<span class="string">"click-jack"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html &#123;</span></span><br><span class="line"><span class="undefined">      display: none !important;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (self == top) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> style = <span class="built_in">document</span>.getElementById(<span class="string">'click-jack'</span>)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.body.removeChild(style)</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">      top.location = self.location</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上代码的作用就是当通过 iframe 的方式加载页面时，攻击者的网页直接不显示所有内容了。</p>
<h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><p>中间人攻击是攻击方同时与服务端和客户端建立起了连接，并让对方认为连接是安全的，但是实际上整个通信过程都被攻击者控制了。攻击者不仅能获得双方的通信信息，还能修改通信信息。</p>
<p>通常来说不建议使用公共的 Wi-Fi，因为很可能就会发生中间人攻击的情况。如果你在通信的过程中涉及到了某些敏感信息，就完全暴露给攻击方了。</p>
<p>当然防御中间人攻击其实并不难，只需要增加一个安全通道来传输信息。HTTPS 就可以用来防御中间人攻击，但是并不是说使用了 HTTPS 就可以高枕无忧了，因为如果你没有完全关闭 HTTP 访问的话，攻击方可以通过某些方式将 HTTPS 降级为 HTTP 从而实现中间人攻击。</p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js实现深拷贝</title>
    <url>/2020/03/15/2020/3%E6%9C%88/0315-02/</url>
    <content><![CDATA[<h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><ol>
<li>Object.assign</li>
<li>展开运算符…</li>
<li>Array.slice();</li>
</ol>
<p>首先可以通过 Object.assign 来解决这个问题，很多人认为这个函数是用来深拷贝的。其实并不是，Object.assign 只会拷贝所有的属性值到新的对象中，如果属性值是对象的话，拷贝的是地址，所以并不是深拷贝。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  age: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Object</span>.assign(&#123;&#125;, a)</span><br><span class="line">a.age = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(b.age) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>另外我们还可以通过展开运算符 … 来实现浅拷贝</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  age: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123; ...a &#125;</span><br><span class="line">a.age = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(b.age) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>通常浅拷贝就能解决大部分问题了，但是当我们遇到如下情况就可能需要使用到深拷贝了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  age: <span class="number">1</span>,</span><br><span class="line">  jobs: &#123;</span><br><span class="line">    first: <span class="string">'FE'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123; ...a &#125;</span><br><span class="line">a.jobs.first = <span class="string">'native'</span></span><br><span class="line"><span class="built_in">console</span>.log(b.jobs.first) <span class="comment">// native</span></span><br></pre></td></tr></table></figure>
<p>浅拷贝只解决了第一层的问题，如果接下去的值中还有对象的话，那么就又回到最开始的话题了，两者享有相同的地址。要解决这个问题，我们就得使用深拷贝了。</p>
<h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>这个问题通常可以通过 JSON.parse(JSON.stringify(object)) 来解决。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  age: <span class="number">1</span>,</span><br><span class="line">  jobs: &#123;</span><br><span class="line">    first: <span class="string">'FE'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a))</span><br><span class="line">a.jobs.first = <span class="string">'native'</span></span><br><span class="line"><span class="built_in">console</span>.log(b.jobs.first) <span class="comment">// FE</span></span><br></pre></td></tr></table></figure>
<p>但是该方法也是有局限性的：</p>
<ul>
<li>会忽略 undefined</li>
<li>会忽略 symbol</li>
<li>不能序列化函数</li>
<li>不能解决循环引用的对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    c: <span class="number">2</span>,</span><br><span class="line">    d: <span class="number">3</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj.c = obj.b</span><br><span class="line">obj.e = obj.a</span><br><span class="line">obj.b.c = obj.c</span><br><span class="line">obj.b.d = obj.b</span><br><span class="line">obj.b.e = obj.b.c</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line"><span class="built_in">console</span>.log(newObj)</span><br></pre></td></tr></table></figure>
<p>如果你有这么一个循环引用对象，你会发现并不能通过该方法实现深拷贝<br>在遇到函数、 undefined 或者 symbol 的时候，该对象也不能正常的序列化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  age: <span class="literal">undefined</span>,</span><br><span class="line">  sex: <span class="built_in">Symbol</span>(<span class="string">'male'</span>),</span><br><span class="line">  jobs: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  name: <span class="string">'yck'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a))</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#123;name: "yck"&#125;</span></span><br></pre></td></tr></table></figure>
<p>你会发现在上述情况中，该方法会忽略掉函数和 undefined 。</p>
<p>但是在通常情况下，复杂数据都是可以序列化的，所以这个函数可以解决大部分问题。</p>
<p>如果你所需拷贝的对象含有内置类型并且不包含函数，可以使用 MessageChannel</p>
<p>当然你可能想自己来实现一个深拷贝，但是其实实现一个深拷贝是很困难的，需要我们考虑好多种边界情况，比如原型链如何处理、DOM 如何处理等等，所以这里我们实现的深拷贝只是简易版，并且我其实更推荐使用 lodash 的深拷贝函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">typeof</span> o === <span class="string">'object'</span> || <span class="keyword">typeof</span> o === <span class="string">'function'</span>) &amp;&amp; o !== <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isObject(obj)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'非对象'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> isArray = <span class="built_in">Array</span>.isArray(obj);</span><br><span class="line">  <span class="keyword">let</span> newObj = isArray ? [...obj] : &#123;...obj&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Reflect</span>.hasOwn(newObj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    newObj[key] = isObject(obj[key]) ? deepClone(newObj[key]) : obj[key];</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>常见数据结构</title>
    <url>/2020/03/19/2020/3%E6%9C%88/0319-01/</url>
    <content><![CDATA[<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>通常使用最差的时间复杂度来衡量一个算法的好坏。<br>常数时间O(1)代表这个操作和数据量没有关系，是一个固定时间的操作，比如说四则运算。</p>
<p>对于一个算法来说，可能会计算出操作次数为 aN + 1，N代表数据量。那么该算法的时间复杂度就是O(N)。因为我们在计算时间复杂度的时候，数据量通常是非常大的，这时候低阶项和常数项可以忽略不计。</p>
<p>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>栈是一个线性结构，在计算机中是一个相当常见的数据结构。<br>栈的特点是只能在某一端添加或删除数据，遵循先进后出的原则。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>每种数据结构都可以用很多种方式来实现，其实可以把栈当做一个数组的子集，所以这里使用数组来实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.stack = [];</span><br><span class="line">  &#125;</span><br><span class="line">  push(item) &#123;</span><br><span class="line">    <span class="keyword">this</span>.stack.push(item);</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">this</span>.stack.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  getCount() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.stack.length;</span><br><span class="line">  &#125;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.stack[<span class="keyword">this</span>.getCount - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getCount() === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>匹配括号，可以通过栈的特性来完成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> map = &#123;</span><br><span class="line">    <span class="string">'('</span>: <span class="number">-1</span>,</span><br><span class="line">    <span class="string">')'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'['</span>: <span class="number">-2</span>,</span><br><span class="line">    <span class="string">']'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'&#123;'</span>: <span class="number">-3</span>,</span><br><span class="line">    <span class="string">'&#125;'</span>: <span class="number">3</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> stack = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> s) &#123;</span><br><span class="line">    <span class="keyword">if</span> (map[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      stack.push(i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> last = stack.pop();</span><br><span class="line">      <span class="keyword">if</span> (map[last] + map[i] !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>队列是一个线性结构，特点是在某一端添加数据，在另一端删除数据，遵循先进先出的原则。</p>
<h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>单链队列和循环队列</p>
<h4 id="单链队列"><a href="#单链队列" class="headerlink" title="单链队列"></a>单链队列</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.queue = [];</span><br><span class="line">  &#125;</span><br><span class="line">  enQueue(item) &#123;</span><br><span class="line">    <span class="keyword">this</span>.queue.push(item);</span><br><span class="line">  &#125;</span><br><span class="line">  deQueue() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.queue.shift();</span><br><span class="line">  &#125;</span><br><span class="line">  getHeader() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  getLength() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.queue.length;</span><br><span class="line">  &#125;</span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.queue.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2>]]></content>
      <tags>
        <tag>计算机知识</tag>
      </tags>
  </entry>
  <entry>
    <title>css常见布局</title>
    <url>/2020/03/24/2020/3%E6%9C%88/0324-01/</url>
    <content><![CDATA[<h2 id="双飞燕布局"><a href="#双飞燕布局" class="headerlink" title="双飞燕布局"></a>双飞燕布局</h2><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>圣杯布局<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2>]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP----HTTP缓存机制</title>
    <url>/2020/03/24/2020/3%E6%9C%88/0324-02/</url>
    <content><![CDATA[<h1 id="HTTP—-HTTP缓存机制"><a href="#HTTP—-HTTP缓存机制" class="headerlink" title="HTTP—-HTTP缓存机制"></a>HTTP—-HTTP缓存机制</h1><h2 id="缓存的规则"><a href="#缓存的规则" class="headerlink" title="缓存的规则"></a>缓存的规则</h2><p>我们知道http的缓存属于客户端缓存，后面会提到为什么属于客户端缓存。所以我们认为浏览器存在一个缓存数据库，用于储存一些不经常变化的静态文件（图片、css、js等）。我们将缓存分为强制缓存和协商缓存。</p>
<h3 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h3><p>强缓存中，当请求再次发出时，浏览器会根据其中的 expires 和 cache-control 判断目标资源是否“命中”强缓存，若命中则直接从缓存中获取资源，<strong>不会再与服务端发生通信。</strong></p>
<p>命中强缓存的情况下，返回的 HTTP 状态码为 200 （如下图）。</p>
<p><img src="./images/cache.jpg" alt="avatar"></p>
<h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>又称对比缓存，客户端会先从缓存数据库中获取到一个缓存数据的标识，得到标识后请求服务端验证是否失效，如果没有失效服务端会返回304，此时客户端直接从缓存中获取所以请求的数据，如果标识失效，服务端会返回更新后的数据。</p>
<p><strong>两类缓存机制可以同时存在，强制缓存的优先级高于协商缓存，当执行强制缓存时，如若缓存命中，则直接使用缓存数据库数据，不在进行缓存协商。</strong></p>
<h2 id="缓存的方案"><a href="#缓存的方案" class="headerlink" title="缓存的方案"></a>缓存的方案</h2><h3 id="强制缓存-1"><a href="#强制缓存-1" class="headerlink" title="强制缓存"></a>强制缓存</h3><p>对于强制缓存，服务器响应的header中会用两个字段来表明 —– Expires和Cache-Control</p>
<h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p>Expires的值为服务端返回的数据到期时间。当再次请求时的请求时间小于返回的此时间，则直接使用缓存数据。但由于服务端时间和客户端时间可能有误差，这也就导致缓存命中的误差，另一方面，Expires是HTTP1.0的产物，故现在大多数使用Cache-control替代。</p>
<h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h4><p>Cache-control有很多属性，不同的属性代表的意义也不同。<br>private：客户端可以缓存<br>public：客户端和代理服务器都可以缓存<br>max-age：缓存内容将在t秒后失效<br>no-cache：需要使用协商缓存来验证数据<br>no-store：所有内容都不会缓存</p>
<h3 id="协商缓存-1"><a href="#协商缓存-1" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>协商缓存依赖于服务端与浏览器之间的通信。</p>
<p>协商缓存机制下，浏览器需要向服务器去询问缓存的相关信息，进而判断是重新发起请求、下载完整的响应，还是从本地获取缓存的资源。</p>
<p>如果服务端提示缓存资源未改动（Not Modified），资源会被重定向到浏览器缓存，这种情况下网络请求对应的状态码是 304（如下图）。</p>
<p><img src="./images/304.jpg" alt="avatar"></p>
<h4 id="协商缓存的实-从-Last-midified-到-Etag"><a href="#协商缓存的实-从-Last-midified-到-Etag" class="headerlink" title="协商缓存的实: 从 Last-midified 到 Etag"></a>协商缓存的实: 从 Last-midified 到 Etag</h4><p>Last-Modified 是一个时间戳，如果我们启用了协商缓存，它会在首次请求时随着 Response Headers 返回：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Last-Modified: Fri, 27 Oct 2020 06:35:57 GMT</span><br></pre></td></tr></table></figure>
<p>随后我们每次请求时，会带上一个叫 If-Modified-Since 的时间戳字段，它的值正是上一次 response 返回给它的 last-modified 值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If-Modified-Since: Fri, 27 Oct 2020 06:35:57 GMT</span><br></pre></td></tr></table></figure>
<p>服务器接收到这个时间戳后，会比对该时间戳和资源在服务器上的最后修改时间是否一致，从而判断资源是否发生了变化。如果发生了变化，就会返回一个完整的响应内容，并在 Response Headers 中添加新的 Last-Modified 值；否则，返回如上图的 304 响应，Response Headers 不会再添加 Last-Modified 字段。</p>
<p>使用 Last-Modified 存在一些弊端，这其中最常见的就是这样两个场景：</p>
<ul>
<li><p>我们编辑了文件，但文件的内容没有改变。服务端并不清楚我们是否真正改变了文件，它仍然通过最后编辑时间进行判断。因此这个资源在再次被请求时，会被当做新资源，进而引发一次完整的响应——不该重新请求的时候，也会重新请求。</p>
</li>
<li><p>当我们修改文件的速度过快时（比如花了 100ms 完成了改动），由于 If-Modified-Since 只能检查到以秒为最小计量单位的时间差，所以它是感知不到这个改动的——该重新请求的时候，反而没有重新请求了。</p>
</li>
</ul>
<p>这两个场景其实指向了同一个 bug ——服务器并没有正确感知文件的变化。为了解决这样的问题， Etag 作为 Last-Modified 的补充出现了。</p>
<p>Etag: 是由服务器为每个资源生成的唯一的标识字符串，这个标识字符串是基于文件内容编码的，只要文件内容不同，它们对应的 Etag 就是不同的，反之亦然。因此 Etag 能够精准地感知文件的变化。</p>
<p>Etag 和 Last-Modified 类似，当首次请求时，我们会在响应头里获取到一个最初的标识符字符串，举个🌰，它可以是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ETag: W/&quot;wa3b-1231452&quot;</span><br></pre></td></tr></table></figure>
<p>那么下一次请求时，请求头里就会带上一个值相同的、名为 if-None-Match 的字符串供服务端比对了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If-None-Match: W/&quot;wa3b-1231452&quot;</span><br></pre></td></tr></table></figure>
<h2 id="缓存的优点"><a href="#缓存的优点" class="headerlink" title="缓存的优点"></a>缓存的优点</h2><ol>
<li>减少了冗余的数据传递，节省宽带流量</li>
<li>减少了服务器的负担，大大提高了网站性能</li>
<li>加快了客户端加载网页的速度</li>
</ol>
<h2 id="不同刷新的请求执行过程"><a href="#不同刷新的请求执行过程" class="headerlink" title="不同刷新的请求执行过程"></a>不同刷新的请求执行过程</h2><ol>
<li>浏览器地址栏写入URL，回车，浏览器发现缓存中有这个文件了，不用继续请求了，直接去缓存拿。（最快）</li>
<li>F5刷新，别偷懒好歹去服务器看看这个文件是否过期了。于是浏览器就在请求上带上一个if-modify-since。</li>
<li>Ctrl+F5告诉浏览器，你先把你缓存中的这个文件给我删了，然后再去服务器请求个完整的资源文件下来。于是客户端完成了强行更新的操作。</li>
</ol>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>知识点</title>
    <url>/2020/03/30/2020/3%E6%9C%88/0330/</url>
    <content><![CDATA[<h2 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h2><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>CDN 内容分发网络，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络阻塞，提高用户访问响应效率和命中率。<br>CDN 的关键技术有内容存储和分发技术。</p>
<h2 id="打印一个树结构的对象"><a href="#打印一个树结构的对象" class="headerlink" title="打印一个树结构的对象"></a>打印一个树结构的对象</h2><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><h2 id="js函数的4种调用方式"><a href="#js函数的4种调用方式" class="headerlink" title="js函数的4种调用方式"></a>js函数的4种调用方式</h2><ol>
<li>作为函数直接调用</li>
<li>作为对象的方法调用</li>
<li>使用call、apply动态调用</li>
<li>new命令间接调用</li>
</ol>
<h2 id="this的指向有哪几种情况？"><a href="#this的指向有哪几种情况？" class="headerlink" title="this的指向有哪几种情况？"></a>this的指向有哪几种情况？</h2><ol>
<li>作为函数直接调用，非严格模式下，this指向window，严格模式下，this指向undefined</li>
<li>作为某对象的方法调用，this指向这个对象</li>
<li>使用apply、call、bind调用，this是第一个传递进去的值</li>
<li>在构造函数中调用，this指向这个新创建的对象</li>
<li>箭头函数中没有this，this在箭头函数创建时确定，它与声明所在的上下文相同。</li>
</ol>
<h2 id="regexp正则，讲讲贪婪模式"><a href="#regexp正则，讲讲贪婪模式" class="headerlink" title="regexp正则，讲讲贪婪模式"></a>regexp正则，讲讲贪婪模式</h2><p>正则默认是贪婪模式，默认的贪婪模式会尽可能多的匹配所搜索的字符串。</p>
<h2 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h2><h2 id="面向对象和面向过程的区别，以及他们各自的优缺点"><a href="#面向对象和面向过程的区别，以及他们各自的优缺点" class="headerlink" title="面向对象和面向过程的区别，以及他们各自的优缺点"></a>面向对象和面向过程的区别，以及他们各自的优缺点</h2><h2 id="Css实现瀑布流"><a href="#Css实现瀑布流" class="headerlink" title="Css实现瀑布流"></a>Css实现瀑布流</h2><h2 id="Css-实现圆形进度条"><a href="#Css-实现圆形进度条" class="headerlink" title="Css 实现圆形进度条"></a>Css 实现圆形进度条</h2><h2 id="less-sass的区别"><a href="#less-sass的区别" class="headerlink" title="less sass的区别"></a>less sass的区别</h2><h2 id="链表和数组的区别"><a href="#链表和数组的区别" class="headerlink" title="链表和数组的区别"></a>链表和数组的区别</h2><h2 id="js为什么单线程"><a href="#js为什么单线程" class="headerlink" title="js为什么单线程"></a>js为什么单线程</h2><h2 id="说说-typescript-的特性，有什么好处"><a href="#说说-typescript-的特性，有什么好处" class="headerlink" title="说说 typescript 的特性，有什么好处"></a>说说 typescript 的特性，有什么好处</h2><h2 id="移动端适配怎么做"><a href="#移动端适配怎么做" class="headerlink" title="移动端适配怎么做"></a>移动端适配怎么做</h2>]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP</title>
    <url>/2020/03/11/2020/3%E6%9C%88/TCP/</url>
    <content><![CDATA[<h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议。<br>TCP 基本是和 UDP 反着来，建立连接断开连接都需要先需要进行握手。在传输数据的过程中，通过各种算法保证数据的可靠性，当然带来的问题就是相比 UDP 来说不那么的高效。</p>
<h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><p>首先假设主动发起请求的一端称为客户端，被动连接的一端称为服务端。不管是客户端还是服务端，TCP 连接建立完后都能发送和接收数据，所以 TCP 是一个全双工的协议。<br>起初，两端都为 CLOSED 状态。在通信开始前，双方都会创建 TCB。 服务器创建完 TCB 后便进入 LISTEN 状态，此时开始等待客户端发送数据。</p>
<ul>
<li>第一次握手</li>
</ul>
<p>客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。</p>
<ul>
<li>第二次握手</li>
</ul>
<p>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</p>
<ul>
<li>第三次握手</li>
</ul>
<p>当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</p>
<p><img src="./images/三次握手.jpg" alt="三次握手流程图"></p>
<p>三次握手主要是为了规避因网络延迟导致一些服务器开销的问题。</p>
<h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p>TCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。</p>
<p>第一次： 当主机A完成数据传输后,将控制位FIN置1，提出停止TCP连接的请求 ；</p>
<p>第二次： 主机B收到FIN后对其作出响应，确认这一方向上的TCP连接将关闭,将ACK置1；</p>
<p>第三次： 由B 端再提出反方向的关闭请求,将FIN置1 ；</p>
<p>第四次： 主机A对主机B的请求进行确认，将ACK置1，双方向的关闭结束。</p>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>1、ACK 是TCP报头的控制位之一，对数据进行确认。确认由目的端发出， 用它来告诉发送端这个序列号之前的数据段都收到了。 比如确认号为X，则表示前X-1个数据段都收到了，只有当ACK=1时,确认号才有效，当ACK=0时，确认号无效，这时会要求重传数据，保证数据的完整性。</p>
<p>2、SYN 同步序列号，TCP建立连接时将这个位置1。</p>
<p>3、FIN 发送端完成发送任务位，当TCP完成数据传输需要断开时， 提出断开连接的一方将这位置1。</p>
<h2 id="小结TCP与UDP的区别："><a href="#小结TCP与UDP的区别：" class="headerlink" title="小结TCP与UDP的区别："></a>小结TCP与UDP的区别：</h2><p>1.（基于连接vs无连接）tcp是面向连接的（三次握手；四次挥手）；udp不是面向连接的<br>2.（重量级vs轻量级）tcp是一个重量级的协议；udp则是轻量级的协议。一个tcp数据报的报头大小最少20字节，udp数据报的报头固定8个字节<br>3.（可靠性）tcp交付保证：如果消息在传输中丢失，那么它将重发；udp没有交付保证，一个数据包在运输过程中可能丢失。<br>4.（有序性）消息到达网络的另一端可能是无序的，tcp协议将为你拍好序。Udp不提供任何有序性的保证。<br>5.（速度）tcp慢，适合传输大量数据；udp快，适合传输少量数据。<br>6.（流量控制和拥塞控制）TCP有流量控制和拥塞控制，udp没有。</p>
<ol start="7">
<li>tcp面向字节流，udp面向报文</li>
<li>tcp只能单播，不能发送广播和组播；udp可以广播和组播。</li>
</ol>
<h3 id="流量控制和拥塞控制："><a href="#流量控制和拥塞控制：" class="headerlink" title="流量控制和拥塞控制："></a>流量控制和拥塞控制：</h3><ul>
<li><p>流量控制：就是让发送方发送速率不要太快，要让接收方来的及接收。</p>
</li>
<li><p>拥塞控制：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提：网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title>UDP</title>
    <url>/2020/03/11/2020/3%E6%9C%88/UDP/</url>
    <content><![CDATA[<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>UDP协议是面向无连接的，也就是说不需要在正式传递数据之前先连接起双方。然后UDP协议只是数据报文的搬运工，不保证有序且不丢失的传递到对端，并且UDP协议也没有任何控制流量的算法，总的来说UDP相较于TCP更加的轻便。</p>
<p>我们经常使用“ping”命令来测试两台主机之间TCP/IP通信是否正常， 其实“ping”命令的原理就是向对方主机发送UDP数据包，然后对方主机确认收到数据包， 如果数据包是否到达的消息及时反馈回来，那么网络就是通的。</p>
<h4 id="面向无连接"><a href="#面向无连接" class="headerlink" title="面向无连接"></a>面向无连接</h4><p>UDP是不需要和TCP一样在发送数据前进行3次握手建立连接的，想发数据就可以发送了。<br>并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。</p>
<p>具体来说：</p>
<ul>
<li>在发送端，应用层将数据传递给传输层的UDP协议，UDP只会给数据增加一个UDP头标识下是UDP协议，然后就传递给网络层</li>
<li>在接收端，网络层将数据传递给传输层，UDP只去除IP报文头就传递给应用层，不会任何拼接操作</li>
</ul>
<h4 id="不可靠性"><a href="#不可靠性" class="headerlink" title="不可靠性"></a>不可靠性</h4><p>首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。<br>并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。<br>再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</p>
<h4 id="高效"><a href="#高效" class="headerlink" title="高效"></a>高效</h4><p>虽然 UDP 协议不是那么的可靠，但是正是因为它不是那么的可靠，所以也就没有 TCP 那么复杂了，需要保证数据不丢失且有序到达。<br>因此 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的。</p>
<h4 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h4><p>UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。</p>
<h4 id="适合使用的场景"><a href="#适合使用的场景" class="headerlink" title="适合使用的场景"></a>适合使用的场景</h4><ul>
<li>直播</li>
</ul>
<p>想必大家都看过直播吧，大家可以考虑下如果直播使用了基于 TCP 的协议会发生什么事情？</p>
<p>TCP 会严格控制传输的正确性，一旦有某一个数据对端没有收到，就会停止下来直到对端收到这个数据。这种问题在网络条件不错的情况下可能并不会发生什么事情，但是在网络情况差的时候就会变成画面卡住，然后再继续播放下一帧的情况。</p>
<p>但是对于直播来说，用户肯定关注的是最新的画面，而不是因为网络条件差而丢失的老旧画面，所以 TCP 在这种情况下无用武之地，只会降低用户体验。</p>
<ul>
<li>王者荣耀</li>
</ul>
<p>为什么这样说呢？首先对于王者荣耀来说，用户体量是相当大的，如果使用 TCP 连接的话，就可能会出现服务器不够用的情况，因为每台服务器可供支撑的 TCP 连接数量是有限制的。</p>
<p>再者，因为 TCP 会严格控制传输的正确性，如果因为用户网络条件不好就造成页面卡顿然后再传输旧的游戏画面是肯定不能接受的，毕竟对于这类实时性要求很高的游戏来说，最新的游戏画面才是最需要的，而不是老旧的画面，否则角色都不知道死多少次了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>UDP 相比 TCP 简单的多，不需要建立连接，不需要验证数据报文，不需要流量控制，只会把想发的数据报文一股脑的丢给对端</li>
<li>虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为</li>
</ul>
]]></content>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title>节流、防抖</title>
    <url>/2020/04/17/2020/4%E6%9C%88/0417/</url>
    <content><![CDATA[<h2 id="js-防抖和节流"><a href="#js-防抖和节流" class="headerlink" title="js 防抖和节流"></a>js 防抖和节流</h2><p>在进行窗口的resize、scroll，输入框内容校验等操作时，如果事件处理函数调用的频率无限制，会加重浏览器的负担，导致用户体验非常糟糕。此时我们可以采用debounce（防抖）和throttle（节流）的方式来减少调用频率，同时又不影响实际效果。</p>
<h3 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h3><p>函数防抖（debounce）：当持续触发事件时，一定时间内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了时事件，就重新开始延时。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    timer = setTimeout(fn, delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><p>函数节流（throttle）：当持续触发事件时，保证一定时间段内只调用一次事件处理函数。</p>
<p>节流 throttle（时间缀版）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> prev = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (now - prev &gt;= delay) &#123;</span><br><span class="line">      fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      prev = <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>节流 throttle（定时器版）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        fn.apply(_that, args);</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>节流 throttle （时间缀+定时器版）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> nowTime = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">    clearTimeout(timer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nowTime - startTime &gt;= delay) &#123;</span><br><span class="line">      fn.apply(_that, args);</span><br><span class="line">      startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = setTimeout(fn, delay - (nowTime - startTime));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>函数防抖：将几次操作合并为一次操作进行。原理是维护一个计时器，规定在 delay 时间后触发函数，但是在 delay 时间内再次触发的话，就会取消之前的计时器而重新设置。这样一来，只有最后一次操作能被触发。</p>
<p>函数节流：函数节流不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数，而函数防抖只是在最后一次事件后才触发一次函数。比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 AJAX 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流技术来实现。</p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>知识点</title>
    <url>/2020/04/21/2020/4%E6%9C%88/0421/</url>
    <content><![CDATA[<h4 id="img的src也可以跨域吗"><a href="#img的src也可以跨域吗" class="headerlink" title="img的src也可以跨域吗"></a>img的src也可以跨域吗</h4><p>原理上都是利用标签的src可绕过同源限制，跨域请求的特点，</p>
<p>硬要说不同，那么区别在于：img只能单向发送get请求，不可访问响应内容（只是展现），而script可对其进行解析</p>
<h4 id="实现斐波那契数列并利用缓存进行优化"><a href="#实现斐波那契数列并利用缓存进行优化" class="headerlink" title="实现斐波那契数列并利用缓存进行优化"></a>实现斐波那契数列并利用缓存进行优化</h4><h4 id="redux中connect-的作用"><a href="#redux中connect-的作用" class="headerlink" title="redux中connect()的作用"></a>redux中connect()的作用</h4><p>连接 React 组件与 Store 的作用。</p>
<h4 id="redux-saga的作用"><a href="#redux-saga的作用" class="headerlink" title="redux-saga的作用"></a>redux-saga的作用</h4><h4 id="http中的option方法的应用场景"><a href="#http中的option方法的应用场景" class="headerlink" title="http中的option方法的应用场景"></a>http中的option方法的应用场景</h4><p>OPTIONS方法请求web服务器告知其支持的各种功能。可以询问服务器通常支持哪些方法，或者对某些特殊资源支持哪些方法。</p>
<h4 id="前端预检的过程"><a href="#前端预检的过程" class="headerlink" title="前端预检的过程"></a>前端预检的过程</h4><p>一、为什么要发预检请求？</p>
<p>出于安全考虑，浏览器会限制从脚本发起的跨域 http 请求，像 XMLHttpRequest 和 Fetch 都遵循同源策略。<br>浏览器限制跨域请求一般有两种方式：</p>
<ol>
<li>浏览器限制发起跨域请求</li>
<li>跨域请求跨域正常发起，但是返回的结果被浏览器拦截</li>
</ol>
<p>一般浏览器都是第二种方式限制跨域请求，那就是说请求已到达服务器，并有可能对数据库里的数据进行了操作，但是返回的结果被浏览器拦截了，那么我们就获取不到返回结果，这是一次失败的请求，但是可能对数据库里的数据产生了影响。</p>
<p>为了防止这种情况的发生，规范要求，对这种可能对服务器数据产生副作用的HTTP请求方法，浏览器必须先使用OPTIONS方法发起一个预检请求，从而获知服务器是否允许该跨域请求：如果允许，就发送带数据的真实请求；如果不允许，则阻止发送带数据的真实请求。</p>
<p>二、什么时候发预检请求</p>
<p>http请求包括：简单请求 和 复杂请求。</p>
<ol>
<li>简单请求</li>
</ol>
<p>简单请求不会触发 CORS 预检请求。<br>若满足以下条件，则可视为“简单请求”：</p>
<ul>
<li>get</li>
<li>head</li>
<li>post</li>
</ul>
<p>仅当 post 方法的 Content-Type 值等于下列之一才算简单请求</p>
<blockquote>
<p>text-plain<br>multipart/form-data<br>application/x-www-form-unlenceded</p>
</blockquote>
<ol start="2">
<li>复杂请求（需预检的请求）</li>
</ol>
<p>“需预检的请求”要求必须首先使用OPTIONS方法发起一个预检请求到服务区，以获知服务器是否允许该实际请求。“预检请求”的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响。</p>
<p>当请求满足下述任一条件时，即应首先发送预检请求：<br>使用了下面任一 HTTP 方法：</p>
<ul>
<li>put</li>
<li>delete</li>
<li>connect</li>
<li>options</li>
<li>trace</li>
<li>patch</li>
</ul>
<h4 id="移动端怎么解决12px字体的问题，怎么解决0-5px的线条"><a href="#移动端怎么解决12px字体的问题，怎么解决0-5px的线条" class="headerlink" title="移动端怎么解决12px字体的问题，怎么解决0.5px的线条"></a>移动端怎么解决12px字体的问题，怎么解决0.5px的线条</h4><h4 id="移动端手指触碰后的事件api触发顺序"><a href="#移动端手指触碰后的事件api触发顺序" class="headerlink" title="移动端手指触碰后的事件api触发顺序"></a>移动端手指触碰后的事件api触发顺序</h4><h4 id="react-的虚拟-dom-是怎么实现的"><a href="#react-的虚拟-dom-是怎么实现的" class="headerlink" title="react 的虚拟 dom 是怎么实现的"></a>react 的虚拟 dom 是怎么实现的</h4><h4 id="react-的渲染过程中，兄弟节点之间是怎么处理的？也就是-key-值不一样的时候。"><a href="#react-的渲染过程中，兄弟节点之间是怎么处理的？也就是-key-值不一样的时候。" class="headerlink" title="react 的渲染过程中，兄弟节点之间是怎么处理的？也就是 key 值不一样的时候。"></a>react 的渲染过程中，兄弟节点之间是怎么处理的？也就是 key 值不一样的时候。</h4><h4 id="你说一下-webpack-的一些-plugin，怎么使用-webpack-对项目进行优化"><a href="#你说一下-webpack-的一些-plugin，怎么使用-webpack-对项目进行优化" class="headerlink" title="你说一下 webpack 的一些 plugin，怎么使用 webpack 对项目进行优化"></a>你说一下 webpack 的一些 plugin，怎么使用 webpack 对项目进行优化</h4><h4 id="scoped是怎么实现的，追问为什么加deep能穿透样式？（可以说说-global-的实现）"><a href="#scoped是怎么实现的，追问为什么加deep能穿透样式？（可以说说-global-的实现）" class="headerlink" title="scoped是怎么实现的，追问为什么加deep能穿透样式？（可以说说 :global 的实现）"></a>scoped是怎么实现的，追问为什么加deep能穿透样式？（可以说说 :global 的实现）</h4><h4 id="为什么字体大小最小设置成12px？"><a href="#为什么字体大小最小设置成12px？" class="headerlink" title="为什么字体大小最小设置成12px？"></a>为什么字体大小最小设置成12px？</h4><p>因为 Chrome 这款任性的浏览器做了如下限制：</p>
<ol>
<li>font-size 有一个最小值 12px（不同操作系统、不同语言可能限制不一样），低于12px的，一律按12px显示。理由是 Chrome 认为低于12px的中文对人类是不友好的。</li>
<li>但是允许你把 font-size 设置为0</li>
<li>这个12px的限制用户是可以自行调整的，进入 chrome://setting/fonts 设置。</li>
</ol>
<p>如果一定要使用小于12px的字号，可以使用 transform: scale(0.9), 缩放的方式来解决。</p>
<p>Mac 下测试 Chrome、Firefox、Safire 浏览器，只有 Chrome 有这个限制。</p>
<h5 id="我现在有一个数组-1-2-3-4-，请实现算法，得到这个数组的全排列的数组，如-2-1-3-4-，"><a href="#我现在有一个数组-1-2-3-4-，请实现算法，得到这个数组的全排列的数组，如-2-1-3-4-，" class="headerlink" title="我现在有一个数组[1,2,3,4]，请实现算法，得到这个数组的全排列的数组，如[2,1,3,4]，"></a>我现在有一个数组[1,2,3,4]，请实现算法，得到这个数组的全排列的数组，如[2,1,3,4]，</h5><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><h4 id="我现在有一个背包，容量为-m，然后有-n-个货物，重量分别为-w1-w2-w3…wn，每个货物的价值是-v1-v2-v3…vn，w-和-v-没有任何关系，请求背包能装下的最大价值。"><a href="#我现在有一个背包，容量为-m，然后有-n-个货物，重量分别为-w1-w2-w3…wn，每个货物的价值是-v1-v2-v3…vn，w-和-v-没有任何关系，请求背包能装下的最大价值。" class="headerlink" title="我现在有一个背包，容量为 m，然后有 n 个货物，重量分别为 w1,w2,w3…wn，每个货物的价值是 v1,v2,v3…vn，w 和 v 没有任何关系，请求背包能装下的最大价值。"></a>我现在有一个背包，容量为 m，然后有 n 个货物，重量分别为 w1,w2,w3…wn，每个货物的价值是 v1,v2,v3…vn，w 和 v 没有任何关系，请求背包能装下的最大价值。</h4><h4 id="JS手写二分搜索算法"><a href="#JS手写二分搜索算法" class="headerlink" title="JS手写二分搜索算法"></a>JS手写二分搜索算法</h4><h4 id="实现一个Lazyman"><a href="#实现一个Lazyman" class="headerlink" title="实现一个Lazyman"></a>实现一个Lazyman</h4>]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>网络协议</title>
    <url>/2020/05/13/2020/5%E6%9C%88/0513/</url>
    <content><![CDATA[<h2 id="https-如何建立连接-TLS-加密方式以及握手的流程"><a href="#https-如何建立连接-TLS-加密方式以及握手的流程" class="headerlink" title="https 如何建立连接, TLS 加密方式以及握手的流程"></a>https 如何建立连接, TLS 加密方式以及握手的流程</h2><p>HTTPS其实是HTTP + SSL / TLS 两部分组成，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据。</p>
<p>进行三次握手，建立TCP连接。</p>
<ol>
<li>第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；</li>
<li>第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；</li>
<li>第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</li>
</ol>
<p>SSL握手过程</p>
<ol>
<li>第一阶段 客户端发起请求，以明文传输请求信息，建立安全能力 包括协议版本 会话Id 密码构件 压缩方法和初始随机数</li>
<li>第二阶段 服务器发送证书 密钥交换数据和证书请求，最后发送请求-相应阶段的结束信号</li>
<li>第三阶段 如果有证书请求客户端发送此证书 之后客户端发送密钥交换数据 也可以发送证书验证消息</li>
<li>第四阶段 变更密码构件和结束握手协议</li>
</ol>
]]></content>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>JS运行机制</title>
    <url>/2020/05/14/2020/5%E6%9C%88/0514/</url>
    <content><![CDATA[<h2 id="JS运行机制"><a href="#JS运行机制" class="headerlink" title="JS运行机制"></a>JS运行机制</h2><ul>
<li>理解 JS 的单线程概念</li>
<li>理解任务队列</li>
<li>理解 EventLoop</li>
<li>理解哪些语句会放入异步任务队列</li>
<li>理解语句放入异步任务队列的时机</li>
</ul>
<h3 id="为什么-JavaScript-是单线程"><a href="#为什么-JavaScript-是单线程" class="headerlink" title="为什么 JavaScript 是单线程"></a>为什么 JavaScript 是单线程</h3><p>JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。<br>JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？<br>所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p>
<h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。<br>所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</span><br><span class="line">（2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。</span><br><span class="line">（3）一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</span><br><span class="line">（4）主线程不断重复上面的第三步。</span><br></pre></td></tr></table></figure>
<h3 id="宏任务-amp-微任务"><a href="#宏任务-amp-微任务" class="headerlink" title="宏任务 &amp; 微任务"></a>宏任务 &amp; 微任务</h3><ul>
<li>宏任务（macro-task）： 整体代码script、setTimeOut、setInterval</li>
<li>微任务（mincro-task）：promise.then、promise.nextTick（node）、async/await、MutationObserver</li>
</ul>
]]></content>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>less</title>
    <url>/2020/05/25/2020/5%E6%9C%88/0525/</url>
    <content><![CDATA[<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>使用less有两种方式：</p>
<ol>
<li>在页面中引入 less.js</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/less.js/2.7.2/less.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>npm 安装</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install less -g</span><br></pre></td></tr></table></figure>
<p>具体使用命令 &gt; styles.css</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lessc styles.less</span><br></pre></td></tr></table></figure>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ol>
<li>值变量</li>
</ol>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@color:</span> <span class="number">#000</span>;</span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>选择器变量</li>
</ol>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量名 必须使用大括号包裹</span></span><br><span class="line"><span class="variable">@mySelector:</span> #wrap;</span><br><span class="line"><span class="variable">@Wrap:</span> wrap;</span><br><span class="line"><span class="variable">@&#123;mySelector&#125;</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.@&#123;Wrap&#125;</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#@&#123;Wrap&#125;</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>属性变量</li>
</ol>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@borderStyle:</span> border-style;</span><br><span class="line"><span class="variable">@Soild:</span> solid;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">@&#123;borderStyle&#125;</span>: <span class="variable">@Soild</span>;<span class="comment">//变量名 必须使用大括号包裹</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>url 变量</li>
</ol>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@images:</span> <span class="string">"../img"</span>;<span class="comment">//需要加引号</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"@&#123;images&#125;/dog.png"</span>);<span class="comment">//变量名 必须使用大括号包裹</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"../img/dog.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>less</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2020/07/06/2020/7%E6%9C%88/1/</url>
    <content><![CDATA[function quickSort(arr) {
  if (arr.length <= 1)="" return="" arr;="" const="" index="Math.floor(arr.length" 2);="" 如果此处使用="" midval="arr[index];" 那么将会出现无限递归的错误；="" 1);="" left="[];" right="[];" for="" (let="" i="0;" <="" arr.length;="" i++)="" {="" if="" (arr[i]="" midval)="" left.push(arr[i]);="" }="" else="" right.push(arr[i]);="" quicksort(left).concat(midval,="" quicksort(right));="" var="" test1="quickSort([2,1,3,4,1,2,5,2,7,2,10,21,8,9]);" console.log(test1);="" function="" b(arr)="" j="i" +="" 1;="" j++)=""> arr[j]) {
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
    }
  }

  return arr;
}


function curry(fn, args = []) {
  return function result() {
    const rest = [...args, ...arguments];
    if (rest.length < fn.length) {
      return curry.call(this, fn, rest);
    } else {
      return fn.apply(this, rest);
    }
  }
}



document.getElementById('btn').onclick = function () {
  Print('#wrap', {
    onStart: function () {
      console.log('onStart', new Date())
    },
    onEnd: function () {
      console.log('onEnd', new Date())
    }
  })
}

</=>]]></content>
  </entry>
  <entry>
    <title>URI、URL、URN</title>
    <url>/2020/07/08/2020/7%E6%9C%88/URI/</url>
    <content><![CDATA[<h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><p>Uniform Resource Identifier/统一资源标志符</p>
<p>用来唯一标识互联网上的信息资源</p>
<p>包括 URL 和 URN</p>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>Uniform Resource Locator/统一资源定位器</p>
<h3 id="URN"><a href="#URN" class="headerlink" title="URN"></a>URN</h3><p>永久统一资源定位符</p>
<p>在资源移动之后还能被找到</p>
<p>目前还没有非常成熟的使用方案</p>
]]></content>
      <tags>
        <tag>http基础</tag>
      </tags>
  </entry>
  <entry>
    <title>curl</title>
    <url>/2020/07/08/2020/7%E6%9C%88/curl/</url>
    <content><![CDATA[<p>curl 是一个命令行工具，用来请求 web 服务器。它的名字就是客户端（client）的 URL 工具的意思。</p>
<p>不带有任何参数时，curl 就是发出 get 请求。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl www.baidu.com</span><br></pre></td></tr></table></figure>
<p>上面的命令向 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 发出 get 请求，服务器返回的内容会在命令行输出。</p>
<h5 id="b"><a href="#b" class="headerlink" title="-b"></a>-b</h5><p>-b 参数用来向服务器发送 cookie</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -b 'foo=bar' www.baidu.com</span><br></pre></td></tr></table></figure>
<h5 id="c"><a href="#c" class="headerlink" title="-c"></a>-c</h5><p>-c 参数将服务器设置的 cookie 写入一个文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -c cookies.txt www.baidu.com</span><br></pre></td></tr></table></figure>
<h5 id="d"><a href="#d" class="headerlink" title="-d"></a>-d</h5><p>-d 参数用来发送 post 请求</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -d 'login=emma&amp;password=123' -X POST www.baidu.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">curl -d 'login=emma' -d 'password=123' -X POST www.baidu.com</span><br></pre></td></tr></table></figure>
<p>使用 -d 参数以后， HTTP 请求会自动加上表头 Content-Type: application/x-www-form-urlencoded。并且<br>会自动将请求转为 POST 方法，因此可以省略 -X POST。</p>
<p>-d 参数也可以读取本地文本文件的数据，向服务器发送。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -d '@data.txt' www.baidu.com</span><br></pre></td></tr></table></figure>
<h5 id="v"><a href="#v" class="headerlink" title="-v"></a>-v</h5><p>-v 参数输出通信的整个过程，用于调试。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -v www.baidu.com</span><br></pre></td></tr></table></figure>
<p>– trace 参数也可以用于调试，还会输出原始的二进制数据。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --trace - www.baidu.com</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>http基础</tag>
      </tags>
  </entry>
  <entry>
    <title>总结</title>
    <url>/2020/03/17/2020/3%E6%9C%88/0317-01/</url>
    <content><![CDATA[<h2 id="如何实现一个babel插件"><a href="#如何实现一个babel插件" class="headerlink" title="如何实现一个babel插件"></a>如何实现一个babel插件</h2><p>Babel 是 JavaScript 编译器，更确切地说是源码到源码的编译器，通常也叫做“转换编译器（transpiler）”。 意思是说你为 Babel 提供一些 JavaScript 代码，Babel 更改这些代码，然后返回给你新生成的代码。</p>
<h4 id="抽象语法树（AST）"><a href="#抽象语法树（AST）" class="headerlink" title="抽象语法树（AST）"></a>抽象语法树（AST）</h4><h4 id="Babel-的处理步骤"><a href="#Babel-的处理步骤" class="headerlink" title="Babel 的处理步骤"></a>Babel 的处理步骤</h4><p>Babel 的三个主要处理步骤分别是： 解析（parse），转换（transform），生成（generate）。</p>
<hr>
<h2 id="如何实现一个webpack-loader"><a href="#如何实现一个webpack-loader" class="headerlink" title="如何实现一个webpack-loader"></a>如何实现一个webpack-loader</h2><hr>
<h2 id="如何实现一个webpack-plugins"><a href="#如何实现一个webpack-plugins" class="headerlink" title="如何实现一个webpack-plugins"></a>如何实现一个webpack-plugins</h2><hr>
<h2 id="如何实现一个promise"><a href="#如何实现一个promise" class="headerlink" title="如何实现一个promise"></a>如何实现一个promise</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'PENDING'</span>;</span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">'RESOLVED'</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'REJECTED'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">  </span><br><span class="line">  that.value = <span class="literal">null</span>;</span><br><span class="line">  that.state = PENDING;</span><br><span class="line"></span><br><span class="line">  that.resolvedCallbacks = [];</span><br><span class="line">  that.rejectedCallbacks = [];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">      <span class="keyword">return</span> value.then(resolve, reject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (that.state === PENDING) &#123;</span><br><span class="line">      that.state = RESOLVED;</span><br><span class="line">      that.value = value;</span><br><span class="line">      that.resolvedCallbacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> cb(that.value));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (that.state === PENDING) &#123;</span><br><span class="line">      that.state = REJECTED;</span><br><span class="line">      that.value = value;</span><br><span class="line">      that.rejectedCallbacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> cb(that.value));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    fn(resolve, reject);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    reject(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> r</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (that.state === PENDING) &#123;</span><br><span class="line">    that.resolvedCallbacks.push(onFulfilled);</span><br><span class="line">    that.rejectedCallbacks.push(onRejected);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (that.state === RESOLVED) &#123;</span><br><span class="line">    onFulfilled(that.value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (that.state === REJECTED) &#123;</span><br><span class="line">    onRejected(that.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> that;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">111</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="node调试，错误监控"><a href="#node调试，错误监控" class="headerlink" title="node调试，错误监控"></a>node调试，错误监控</h2><hr>
<h2 id="http和https区别"><a href="#http和https区别" class="headerlink" title="http和https区别"></a>http和https区别</h2><p>https就是http和TCP之间有一层SSL层，这一层的实际作用是防止钓鱼和加密。防止钓鱼通过网站的证书，网站必须有CA证书，证书类似于一个解密的签名。另外是加密，加密需要一个密钥交换算法，双方通过交换后的密钥加解密。</p>
<ul>
<li>https协议需要到ca申请证书，一般免费证书很少，需要交费。</li>
<li>http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。</li>
<li>http和https使用的是完全不同的连接方式用的端口也不一样，前者是80，后者是443。</li>
<li>http的连接很简单，是无状态的。</li>
<li>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。</li>
<li>百度和谷歌两大搜索引擎都已经明确表示，HTTPS网站将会作为搜索排名的一个重要权重指标。也就是说HTTPS网站比起HTTP网站在搜索排名中更有优势。</li>
</ul>
<hr>
<h2 id="react，vue生命周期"><a href="#react，vue生命周期" class="headerlink" title="react，vue生命周期"></a>react，vue生命周期</h2><h4 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h4><ul>
<li>brforeCreate</li>
<li>create</li>
<li>beforeMountd</li>
<li>mounted</li>
<li>beforeUpdate</li>
<li>updated</li>
<li>activated</li>
<li>deactivated</li>
<li>beforeDestroy</li>
<li>destroy</li>
<li>errorCaptured</li>
</ul>
<h4 id="react"><a href="#react" class="headerlink" title="react"></a>react</h4><p>calss编程生命周期</p>
<h5 id="初始阶段"><a href="#初始阶段" class="headerlink" title="初始阶段"></a>初始阶段</h5><ul>
<li>constructor</li>
</ul>
<h5 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h5><ul>
<li>componentWillMount</li>
<li>render</li>
<li>componentDidMount</li>
</ul>
<h5 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h5><ul>
<li>componentWillReceiveProps</li>
<li>shouldComponentUpdate</li>
<li>componentWillUpdate</li>
<li>render</li>
<li>componentDidUpdate</li>
</ul>
<h5 id="卸载阶段"><a href="#卸载阶段" class="headerlink" title="卸载阶段"></a>卸载阶段</h5><ul>
<li>componentWillUnmount</li>
</ul>
<p>到了React v16.3，大改动来了，引入了两个新的生命周期函数： getDerivedStateFromProps，getSnapshotBeforeUpdate</p>
<p>static getDerivedStateFromProps(props, state) 在组件创建时和更新时的render方法之前调用，它应该返回一个对象来更新状态，或者返回null来不更新任何内容。</p>
<p>getSnapshotBeforeUpdate() 被调用于render之后，可以读取但无法使用DOM的时候。它使您的组件可以在可能更改之前从DOM捕获一些信息（例如滚动位置）。此生命周期返回的任何值都将作为参数传递给componentDidUpdate（）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollingList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.listRef = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSnapshotBeforeUpdate(prevProps, prevState) &#123;</span><br><span class="line">    <span class="comment">//我们是否要添加新的 items 到列表?</span></span><br><span class="line">    <span class="comment">// 捕捉滚动位置，以便我们可以稍后调整滚动.</span></span><br><span class="line">    <span class="keyword">if</span> (prevProps.list.length &lt; <span class="keyword">this</span>.props.list.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> list = <span class="keyword">this</span>.listRef.current;</span><br><span class="line">      <span class="keyword">return</span> list.scrollHeight - list.scrollTop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate(prevProps, prevState, snapshot) &#123;</span><br><span class="line">    <span class="comment">//如果我们有snapshot值, 我们已经添加了 新的items.</span></span><br><span class="line">    <span class="comment">// 调整滚动以至于这些新的items 不会将旧items推出视图。</span></span><br><span class="line">    <span class="comment">// (这边的snapshot是 getSnapshotBeforeUpdate方法的返回值)</span></span><br><span class="line">    <span class="keyword">if</span> (snapshot !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> list = <span class="keyword">this</span>.listRef.current;</span><br><span class="line">      list.scrollTop = list.scrollHeight - snapshot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div ref=&#123;<span class="keyword">this</span>.listRef&#125;&gt;&#123;<span class="comment">/* ...contents... */</span>&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="redux和rematch"><a href="#redux和rematch" class="headerlink" title="redux和rematch"></a>redux和rematch</h2><hr>
<h2 id="webpack性能优化"><a href="#webpack性能优化" class="headerlink" title="webpack性能优化"></a>webpack性能优化</h2><h6 id="减少webpack打包时间"><a href="#减少webpack打包时间" class="headerlink" title="减少webpack打包时间"></a>减少webpack打包时间</h6><ul>
<li>优化 Loader</li>
</ul>
<p>对于 Loader 来说，影响打包效率首当其冲必属 Babel 了。因为 Babel 会将代码转为字符串生成 AST，然后对 AST 继续进行转变最后再生成新的代码，项目越大，转换代码越多，效率就越低。当然了，我们是有办法优化的。</p>
<p>首先我们可以优化 Loader 的文件搜索范围</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// js 文件才使用 babel</span></span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        <span class="comment">// 只在 src 文件夹下查找</span></span><br><span class="line">        include: [resolve(<span class="string">'src'</span>)],</span><br><span class="line">        <span class="comment">// 不会去查找的路径</span></span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于 Babel 来说，我们肯定是希望只作用在 JS 代码上的，然后 node_modules 中使用的代码都是编译过的，所以我们也完全没有必要再去处理一遍。</p>
<p>当然这样做还不够，我们还可以将 Babel 编译过的文件缓存起来，下次只需要编译更改过的代码文件即可，这样可以大幅度加快打包时间</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">loader: <span class="string">'babel-loader?cacheDirectory=true'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>HappyPack</li>
</ul>
<p>受限于 Node 是单线程运行的，所以 Webpack 在打包的过程中也是单线程的，特别是在执行 Loader 的时候，长时间编译的任务很多，这样就会导致等待的情况。<br>HappyPack 可以将 Loader 的同步执行转换为并行的，这样就能充分利用系统资源来加快打包效率</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  loaders: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      include: [resolve(<span class="string">'src'</span>)],</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="comment">// id 后面的内容对应下面</span></span><br><span class="line">      loader: <span class="string">'happypack/loader?id=happybabel'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    id: <span class="string">'happybabel'</span>,</span><br><span class="line">    loaders: [<span class="string">'babel-loader?cacheDirectory'</span>],</span><br><span class="line">    <span class="comment">// 开启 4 个线程</span></span><br><span class="line">    threads: <span class="number">4</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<ul>
<li>DllPlugin</li>
</ul>
<p>DllPlugin 可以将特定的类库提前打包然后引入。这种方式可以极大的减少打包类库的次数，只有当类库更新版本才有需要重新打包，并且也实现了将公共代码抽离成单独文件的优化方案。</p>
<h6 id="减少webpack打包后的体积"><a href="#减少webpack打包后的体积" class="headerlink" title="减少webpack打包后的体积"></a>减少webpack打包后的体积</h6><ul>
<li>按需加载</li>
</ul>
<p>想必大家在开发 SPA 项目的时候，项目中都会存在十几甚至更多的路由页面。如果我们将这些页面全部打包进一个 JS 文件的话，虽然将多个请求合并了，但是同样也加载了很多并不需要的代码，耗费了更长的时间。那么为了首页能更快地呈现给用户，我们肯定是希望首页能加载的文件体积越小越好，这时候我们就可以使用按需加载，将每个路由页面单独打包为一个文件。当然不仅仅路由可以按需加载，对于 loadash 这种大型类库同样可以使用这个功能。</p>
<hr>
<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>前端监控一般分为三种，分别为页面埋点、性能监控以及异常监控。</p>
<h4 id="页面埋点"><a href="#页面埋点" class="headerlink" title="页面埋点"></a>页面埋点</h4><p>页面埋点应该是大家最常写的监控了，一般起码会监控以下几个数据：</p>
<ul>
<li>PV/UV</li>
<li>停留时长</li>
<li>流量来源</li>
<li>用户交互</li>
</ul>
<p>对于这几类统计，一般的实现思路大致可以分为两种，分别为手写埋点和无埋点的方式。</p>
<p>相信第一种方式也是大家最常用的方式，可以自主选择需要监控的数据然后在相应的地方写入代码。这种方式的灵活性很大，但是唯一的缺点就是工作量较大，每个需要监控的地方都得插入代码。</p>
<p>另一种无埋点的方式基本不需要开发者手写埋点了，而是统计所有的事件并且定时上报。这种方式虽然没有前一种方式繁琐了，但是因为统计的是所有事件，所以还需要后期过滤出需要的数据。</p>
<h4 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h4><p>性能监控可以很好的帮助开发者了解在各种真实环境下，页面的性能情况是如何的。</p>
<p>对于性能监控来说，我们可以直接使用浏览器自带的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Performance" target="_blank" rel="noopener">Performance API</a> 来实现这个功能。</p>
<p>对于性能监控来说，其实我们只需要调用 performance.getEntriesByType(‘navigation’) 这行代码就行了。对，你没看错，一行代码我们就可以获得页面中各种详细的性能相关信息。</p>
<h4 id="异常监控"><a href="#异常监控" class="headerlink" title="异常监控"></a>异常监控</h4><p>对于异常监控来说，以下两种监控是必不可少的，分别是代码报错以及接口异常上报</p>
<p>对于代码运行错误，通常的办法是使用window.onerror拦截报错。该方法能拦截到大部分的详细报错信息，但是也有例外。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @param &#123;String&#125;  msg    错误信息</span></span><br><span class="line"><span class="comment">  * @param &#123;String&#125;  url    出错文件</span></span><br><span class="line"><span class="comment">  * @param &#123;Number&#125;  row    行号</span></span><br><span class="line"><span class="comment">  * @param &#123;Number&#125;  col    列号</span></span><br><span class="line"><span class="comment">  * @param &#123;Object&#125;  error  错误详细信息</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">msg, url, row, col, error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(&#123;</span><br><span class="line">    msg,  url,  row, col, error</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 注意，在返回 true 的时候，异常才不会继续向上抛出error;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>对于跨域的代码运行错误会显示Script error。对于这种情况我们需要给script标签添加crossorigin属性</li>
<li>对于某些浏览器可能不会显示调用栈信息，这种情况通过arguments.callee.caller来做栈递归。</li>
</ul>
<p>对于异步代码来说，可以使用catch的方式捕获错误。比如Promise可以直接使用catch函数，await async可以使用try catch。</p>
<p>但是要注意线上运行的代码都是压缩过的，需要在打包时生成sourceMap文件便于debug。</p>
<h5 id="对于捕获的错误需要上传给服务器"><a href="#对于捕获的错误需要上传给服务器" class="headerlink" title="对于捕获的错误需要上传给服务器**"></a>对于捕获的错误需要上传给服务器**</h5><p>可以通过ajax发送数据<br>还可以通过img标签的src发起一个请求。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">report</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> report = <span class="string">'https://xxx/report'</span>;</span><br><span class="line">  <span class="keyword">new</span> Image().src = report + <span class="string">'error='</span> + error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外接口异常就相对来说简单了，可以列举出出错的状态码。一旦出现此类的状态码就可以立即上报出错。接口异常上报可以让开发人员迅速知道有哪些接口出现了大面积的报错，以便迅速修复问题。</p>
<h2 id="普通函数跟箭头函数的区别"><a href="#普通函数跟箭头函数的区别" class="headerlink" title="普通函数跟箭头函数的区别"></a>普通函数跟箭头函数的区别</h2><ul>
<li>语法更加简洁、清晰</li>
<li>箭头函数不会创建自己的this，它只会从自己的作用域链的上一层继承this</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="string">'GLOBAL'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  id: <span class="string">'OBJ'</span>,</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</span><br><span class="line">  &#125;,</span><br><span class="line">  b: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.a();    <span class="comment">// 'OBJ'</span></span><br><span class="line">obj.b();    <span class="comment">// 'GLOBAL'</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>箭头函数继承而来的this指向永远不变</p>
</li>
<li><p>call/apply/bind无法改变箭头函数中this的指向</p>
</li>
</ul>
<p>.call()/.apply()/.bind()方法可以用来动态修改函数执行时this的指向，但由于箭头函数的this定义时就已经确定且永远不会改变。所以使用这些方法永远也改变不了箭头函数this的指向，虽然这么做代码不会报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="string">'Global'</span>;</span><br><span class="line"><span class="comment">// 箭头函数定义在全局作用域</span></span><br><span class="line"><span class="keyword">let</span> fun1 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fun1();     <span class="comment">// 'Global'</span></span><br><span class="line"><span class="comment">// this的指向不会改变，永远指向Window对象</span></span><br><span class="line">fun1.call(&#123;<span class="attr">id</span>: <span class="string">'Obj'</span>&#125;);     <span class="comment">// 'Global'</span></span><br><span class="line">fun1.apply(&#123;<span class="attr">id</span>: <span class="string">'Obj'</span>&#125;);    <span class="comment">// 'Global'</span></span><br><span class="line">fun1.bind(&#123;<span class="attr">id</span>: <span class="string">'Obj'</span>&#125;)();   <span class="comment">// 'Global'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>箭头函数不能作为构造函数使用</li>
</ul>
<p>因为箭头函数没有自己的this，它的this其实是继承了外层执行环境中的this，且this指向永远不会随在哪里调用、被谁调用而改变，所以箭头函数不能作为构造函数使用，或者说构造函数不能定义成箭头函数，否则用new调用时会报错！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Fun = <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Fun(<span class="string">'cao'</span>, <span class="number">24</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>箭头函数没有自己的arguments，在箭头函数中访问arguments实际上获得的是外层局部（函数）执行环境中的值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例子一</span></span><br><span class="line"><span class="keyword">let</span> fun = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);   <span class="comment">// 111</span></span><br><span class="line">    <span class="comment">// 下面一行会报错</span></span><br><span class="line">    <span class="comment">// Uncaught ReferenceError: arguments is not defined</span></span><br><span class="line">    <span class="comment">// 因为外层全局环境没有arguments对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line">fun(<span class="number">111</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params">val1, val2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> argOut = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(argOut);    <span class="comment">// [111, 222]</span></span><br><span class="line">    <span class="keyword">let</span> fun = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> argIn = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(argIn);     <span class="comment">// // [111, 222]</span></span><br><span class="line">        <span class="built_in">console</span>.log(argOut === argIn);  <span class="comment">// true</span></span><br><span class="line">    &#125;;</span><br><span class="line">    fun();</span><br><span class="line">&#125;</span><br><span class="line">outer(<span class="number">111</span>, <span class="number">222</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>箭头函数没有原型prototype</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sayHi = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello World !'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(sayHi.prototype); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<h2 id="手写一个webpack"><a href="#手写一个webpack" class="headerlink" title="手写一个webpack"></a>手写一个webpack</h2><ul>
<li><a href="https://github.com/lmjben/diy-webpack" target="_blank" rel="noopener">手写一个webpack</a></li>
</ul>
]]></content>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>知识点</title>
    <url>/2020/03/31/2020/3%E6%9C%88/0331/</url>
    <content><![CDATA[<h2 id="React实现一个场景，渲染多张图片，保证图片的底部尽量是对齐的，然后滚动条拉到底，在请求图片再次渲染"><a href="#React实现一个场景，渲染多张图片，保证图片的底部尽量是对齐的，然后滚动条拉到底，在请求图片再次渲染" class="headerlink" title="React实现一个场景，渲染多张图片，保证图片的底部尽量是对齐的，然后滚动条拉到底，在请求图片再次渲染"></a>React实现一个场景，渲染多张图片，保证图片的底部尽量是对齐的，然后滚动条拉到底，在请求图片再次渲染</h2><h2 id="React-中-key-的用法，常用使用场景"><a href="#React-中-key-的用法，常用使用场景" class="headerlink" title="React 中 key 的用法，常用使用场景"></a>React 中 key 的用法，常用使用场景</h2><p><strong>key的概念</strong></p>
<p>react 中的 key 属性是一个特殊的属性，它的出现不是给开发者用的，而是给 react 自身用的。<br>简单的来说，react 利用 key 来识别组件，他是一种身份标识，就像每个人的身份证一样。每个 key 对应一个组件，相同的 key, react 会认为是同一个组件，这样后续相同的 key 对应的组件都不会被创建。(经测试，16版本之后key重复也会渲染出来？)</p>
<p><strong>key的使用场景</strong></p>
<p>在项目开发中，key属性的使用场景最多的还是由数组动态创建的子组件情况，需要为每个子组件添加唯一的key属性值。那有的人会自然而然想到，key 和动态渲染的子元素获取的index的值很接近，是不是我们可以直接使用index值 赋值给key呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  data.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> (</span><br><span class="line">    &lt;div key=&#123;index&#125;&gt;item.name&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  ))</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>在尝试后我们发现报错没了，渲染也没问题。但是这里我们强烈不推荐使用数组的index 值来作为key。<br>如果数据更新仅仅是数组重新排序或在其中间位置插入新元素，那么所有元素都将重新渲染。</p>
<p>例如：<br>本来index=2 的元素向前移动后，那该元素的key 不也同样发生了改变，那这样改变，key 就没有任何存在的意义了，既然是作为身份证一样的存在，那就不容有失，当然，在你用key值创建子组件的时候，若数组的内容只是作为纯展示，而不涉及到数组的动态变更，其实是可以使用index 作为key的，</p>
<p><strong>key的值必须保证唯一且稳定</strong></p>
<p>我们在与key值打过几次交到以后，感觉key值就类似于数据库中的主键id一样，有且唯一。</p>
<h2 id="React如何处理更新"><a href="#React如何处理更新" class="headerlink" title="React如何处理更新"></a>React如何处理更新</h2><h2 id="React-内部-setState-是如何批处理的"><a href="#React-内部-setState-是如何批处理的" class="headerlink" title="React 内部 setState 是如何批处理的"></a>React 内部 setState 是如何批处理的</h2><p>setState 的批量更新按照先进先出的原则，顺序更新。</p>
<ol>
<li>在 react 的 event handler 内部同步的多次 setState 会被 batch 为一次更新</li>
<li>在一个异步的事件循环里面多次 setState，react 不会 batch</li>
<li>可以使用React.unstable_batchedUpdates 来强制 batch</li>
</ol>
<p><strong>为什么在 setTimeout 中多次 setState，react 不会 batch？</strong></p>
<p>因为 React 的更新是基于 Transaction（事务）的，Transacation 就是给目标执行的函数包裹一下，加上前置和后置的 hook （有点类似 koa 的 middleware），在开始执行之前先执行 initialize hook，结束之后再执行 close hook，这样搭配上 isBatchingUpdates 这样的布尔标志位就可以实现一整个函数调用栈内的多次 setState 全部入 pending 队列，结束后统一 apply 了。</p>
<p>但是 setTimeout 这样的方法执行是脱离了事务的，react 管控不到，所以就没法 batch 了。 React没有控制权的函数 setTimeout</p>
<p><strong>为什么 react 要这么设计？</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div onClick=&#123;() =&gt; setCount(count + <span class="number">1</span>)&#125;&gt;</span><br><span class="line">      Parent clicked &#123;count&#125; times</span><br><span class="line">      &lt;Child /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Child() &#123;</span></span><br><span class="line"><span class="regexp">  let [count, setCount] = useState(0);</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">      Child clicked &#123;count&#125; times</span></span><br><span class="line"><span class="regexp">    &lt;/</span>button&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这样的 demo，由于点击事件冒泡的缘故，我们假设如果 react 不 batch 立即更新的话，那么点了 child button 之后的逻辑会是如下这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*** 进入 react click 的事件函数 ***</span><br><span class="line">Child (onClick) 触发点击</span><br><span class="line">  - setState 修改 state</span><br><span class="line">  - re-render Child 重新渲染 // 😞 不必要的</span><br><span class="line">Parent (onClick) 触发点击（冒泡）</span><br><span class="line">  - setState 修改 state</span><br><span class="line">  - re-render Parent 重新渲染</span><br><span class="line">  - re-render Child 重新渲染 （渲染是自顶向下的，父亲更新会导致儿子更新）</span><br><span class="line">*** 退出 react click 的事件函数  ***</span><br></pre></td></tr></table></figure>
<p>从上面可以看出，第一次子组件的重新渲染完全是浪费的。</p>
<p>所以 React 设计成 setState 不立即触发重新渲染，而是先执行完所有的 event handler，然后用一次重新渲染完成所有更新。</p>
<p><strong>forceUpdate的说明</strong></p>
<p>forceUpdate 从函数名上理解：“强制更新”。</p>
<ol>
<li>forceUpdate 是同步的吗？“强制”会保证调用然后直接dom-diff吗？</li>
</ol>
<p>forceUpdate在批量与否的表现上，和setState是一样的。在React有控制权的函数里，是批量的。</p>
<ol start="2">
<li>“强制”更新整个组件树吗？包括自己，子孙后代组件吗？</li>
</ol>
<p>forceUpdate只会强制本身组件的更新，即不调用“shouldComponentUpdate”直接更新，对于子孙后代组件还是要调用自己的“shouldComponentUpdate”来决定的。</p>
<h2 id="React15如何去优化"><a href="#React15如何去优化" class="headerlink" title="React15如何去优化"></a>React15如何去优化</h2><h2 id="useCallback-useMemo的区别"><a href="#useCallback-useMemo的区别" class="headerlink" title="useCallback useMemo的区别"></a>useCallback useMemo的区别</h2><p><strong>useMemo</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> computeExpensiveValue(a, b), [a, b]);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>把创建函数和依赖项数组作为参数传入useMemo，它仅会在某个依赖项改变时才重新计算memoized值。这种优化有助于避免在每次渲染时都进行高开销的计算。</p>
</blockquote>
<p><strong>useCallback</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedCallback = useCallback(</span><br><span class="line">  () =&gt; doSomething(a, b),</span><br><span class="line">  [a, b]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>把内联回调函数及依赖项数组作为参数传入useCallback, 它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当你把回调函数<br>传递给经过优化的并使用引用相等性去避免非必要的渲染的子组件时，它将非常有用</p>
</blockquote>
<p>看起来似乎和useMemo差不多，我们来看看有什么异同：</p>
<p>useMemo 和 useCallback 接收的参数都是一样，都是在其依赖项发生变化后才执行，都是返回缓存的值，区别在于 useMemo 返回的是函数运行的结果，useCallback返回的函数。</p>
<blockquote>
<p>useCallback(fn, deps) 相当于 useMemo(() =&gt; fn, deps)</p>
</blockquote>
<h2 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h2><h4 id="没有破坏性改动"><a href="#没有破坏性改动" class="headerlink" title="没有破坏性改动"></a>没有破坏性改动</h4><ul>
<li>完全是可选的。</li>
<li>100%向后兼容的。</li>
<li>现在可用，hook 发布于 v16.8.0</li>
</ul>
<p><strong>没有计划从React移除class。</strong><br><strong>Hook不会影响你对 React 概念的理解。</strong></p>
<h4 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h4><p>Hook 解决了我们五年来编写和维护成千上万的组件时遇到的各种各样看起来不相关的问题。</p>
<h5 id="在组件之间复用状态逻辑很难"><a href="#在组件之间复用状态逻辑很难" class="headerlink" title="在组件之间复用状态逻辑很难"></a>在组件之间复用状态逻辑很难</h5><p>你可以使用 Hook 从组件中提取状态逻辑，使得这些逻辑可以单独测试并复用。Hook 使你在无需修改组件结构的情况下复用状态逻辑。</p>
<h5 id="复杂组件变得难以理解"><a href="#复杂组件变得难以理解" class="headerlink" title="复杂组件变得难以理解"></a>复杂组件变得难以理解</h5><p>我们经常维护一些组件，组件起初很简单，但是逐渐会被状态逻辑和副作用充斥。每个生命周期常常包含一些不相关的逻辑。例如，组件常常在 componentDidMount 和 componentDidUpdate 中获取数据。但是，同一个 componentDidMount 中可能也包含很多其它的逻辑，如设置事件监听，而之后需在 componentWillUnmount 中清除。相互关联且需要对照修改的代码被进行了拆分，而完全不相关的代码却在同一个方法中组合在一起。如此很容易产生 bug，并且导致逻辑不一致。</p>
<p>为了解决这个问题，Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据），而并非强制按照生命周期划分。你还可以使用 reducer 来管理组件的内部状态，使其更加可预测。</p>
<h5 id="难以理解的-class"><a href="#难以理解的-class" class="headerlink" title="难以理解的 class"></a>难以理解的 class</h5><p>除了代码复用和代码管理会遇到困难外，我们还发现 class 是学习 React 的一大屏障。你必须去理解 JavaScript 中 this 的工作方式，这与其他语言存在巨大差异。还不能忘记绑定事件处理器。没有稳定的语法提案，这些代码非常冗余。大家可以很好地理解 props，state 和自顶向下的数据流，但对 class 却一筹莫展。即便在有经验的 React 开发者之间，对于函数组件与 class 组件的差异也存在分歧，甚至还要区分两种组件的使用场景。class 也给目前的工具带来了一些问题。例如，class 不能很好的压缩，并且会使热重载出现不稳定的情况。因此，我们想提供一个使代码更易于优化的 API。</p>
<p>为了解决这些问题，Hook 使你在非 class 的情况下可以使用更多的 React 特性。 从概念上讲，React 组件一直更像是函数。而 Hook 则拥抱了函数，同时也没有牺牲 React 的精神原则。Hook 提供了问题的解决方案，无需学习复杂的函数式或响应式编程技术。</p>
<h2 id="React-Context-如何去使用"><a href="#React-Context-如何去使用" class="headerlink" title="React Context 如何去使用"></a>React Context 如何去使用</h2><ul>
<li>React.createContext</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MyContext = React.createContext(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>Context.Provider</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;MyContext.Provider value=&#123;value&#125;&gt;</span><br></pre></td></tr></table></figure>
<p>每个 Context 组件都会返回一个 Provider React组件，它允许消费组件订阅 context 的变化。</p>
<ul>
<li>Class.contextType</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> contextType = MyContext;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">this</span>.context;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">this</span>.context;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">this</span>.context;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>挂载在class上的 contextType 属性会被重赋值为一个由 React.createContext() 创建的 Context 对象。 这能让你使用<br>this.context 来消费最近 Context 上的值。你可以在任何生命周期中访问到它，包括render函数中。</p>
<ul>
<li>Context.Consumer</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;MyContext.Consumer&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    value =&gt; <span class="comment">/* 基于context的值渲染 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/MyContext.consumer&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Redux-和-Mobx-的区别"><a href="#Redux-和-Mobx-的区别" class="headerlink" title="Redux 和 Mobx 的区别"></a>Redux 和 Mobx 的区别</h2><ol>
<li>开发难度低，redux 需要引入很多第三方库来完善工程需求。</li>
<li>开发代码少， redux 需要写大量的样板代码。</li>
<li>增加渲染性能，redux需要借助 shouldComponentUpdate 或者 immutable 来优化。</li>
</ol>
<h2 id="在使用Redux中，当修改一个数据，发现组件没有更新，可能的原因有哪些"><a href="#在使用Redux中，当修改一个数据，发现组件没有更新，可能的原因有哪些" class="headerlink" title="在使用Redux中，当修改一个数据，发现组件没有更新，可能的原因有哪些"></a>在使用Redux中，当修改一个数据，发现组件没有更新，可能的原因有哪些</h2><ol>
<li>是否 key 值重复导致</li>
<li>是否正确的引入数据, 或者传递props</li>
<li>是否组件内部忘记connect</li>
</ol>
<h2 id="React16-函数式编程怎么去优化"><a href="#React16-函数式编程怎么去优化" class="headerlink" title="React16 函数式编程怎么去优化"></a>React16 函数式编程怎么去优化</h2><ul>
<li>useMemo</li>
<li>useCallback</li>
<li>fragments</li>
</ul>
]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>知识点</title>
    <url>/2020/04/02/2020/4%E6%9C%88/0402/</url>
    <content><![CDATA[<h2 id="js-为什么是单线程？"><a href="#js-为什么是单线程？" class="headerlink" title="js 为什么是单线程？"></a>js 为什么是单线程？</h2><p>线程：是操作系统能够进行运算调度的最小单位。<br>单线程：（上面有说：一条线程指的是进程中一个单一顺序的控制流）就是在进程中只有一条线程，在程序执行时，所走的程序路径按照连续顺序排下来，前面的必须处理好，后面的才会执行。<br>作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？<br>所以，为了避免复杂性，从一诞生，JavaScript就是单线程。</p>
<h2 id="浏览器的内核机制"><a href="#浏览器的内核机制" class="headerlink" title="浏览器的内核机制"></a>浏览器的内核机制</h2><p>浏览器的内核是多线程的，一个浏览器一般至少实现三个常驻线程：</p>
<ol>
<li>javascript引擎：是基于事件驱动单线程执行的，js引擎一直等待着任务队列中任务的到来，然后加以处理，浏览器无论什么时候都只有一个js线程在运行js程序。</li>
<li>GUI 渲染线程：负责渲染浏览界面，当界面需要重排、重绘或由于某种操作引发回流时，该线程就会执行。但需要注意 GUI 渲染线程与 js 引擎是互斥的，当js引擎执行时GUI线程会被挂起，<br>GUI 更新会被保存在一个队列中等到js引擎空闲时立即被执行。</li>
<li>事件触发线程：当一个事件被触发时该线程会把事件添加到待处理列的队尾，等待js引擎的处理。</li>
</ol>
<h2 id="React-事件与-js-事件的区别"><a href="#React-事件与-js-事件的区别" class="headerlink" title="React 事件与 js 事件的区别"></a>React 事件与 js 事件的区别</h2><p>JSX 上写的事件并没有绑定在对应的真实 DOM 上，而是通过事件代理的方式，将所有的事件都统一绑定在了 document 上。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。<br>另外冒泡到 document 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 event.stopPropagation 是无效的，而应该调用 event.preventDefault。</p>
<p>那么实现合成事件的目的是什么呢？总的来说在我看来好处有两点，分别是：</p>
<ul>
<li><p>合成事件首先抹平了浏览器之间的兼容问题，另外这是一个跨浏览器原生事件包装器，赋予了跨浏览器开发的能力</p>
</li>
<li><p>对于原生浏览器事件来说，浏览器会给监听器创建一个事件对象。如果你有很多的事件监听，那么就需要分配很多的事件对象，造成高额的内存分配问题。但是对于合成事件来说，有一个事件池专门来管理它们的创建和销毁，当事件需要被使用时，就会从池子中复用对象，事件回调结束后，就会销毁事件对象上的属性，从而便于下次复用事件对象。</p>
</li>
</ul>
<h2 id="setState-的执行流程"><a href="#setState-的执行流程" class="headerlink" title="setState 的执行流程"></a>setState 的执行流程</h2><h2 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h2><h2 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h2><p>移动端的屏幕宽度差距比较小（4-8英寸），UI页面通常也会保持一致的布局方式，只是文字、图标、大图片等可能会根据业务需要做一些定制化的处理。</p>
<p><strong>Pad设备虽然也是移动设备，但是因为屏幕足够宽，所以现在多数产品（某宝）的方案都是访问PC站点了</strong></p>
<h3 id="移动端多屏适配的需求，常见主要有两类："><a href="#移动端多屏适配的需求，常见主要有两类：" class="headerlink" title="移动端多屏适配的需求，常见主要有两类："></a>移动端多屏适配的需求，常见主要有两类：</h3><ol>
<li>布局伸缩式（布局伸缩，内容大小固定或梯级变化）</li>
<li>等比缩放式（布局和内容完全等比例缩放）</li>
</ol>
<h4 id="布局伸缩式"><a href="#布局伸缩式" class="headerlink" title="布局伸缩式"></a>布局伸缩式</h4><p>布局伸缩式适配需求，常见于排版比较简单的信息流展示类业务。<br>其布局特点一般为横向伸缩，竖向高度固定或由内容填充决定；文字图标等网页内容一般会固定大小，且在宽屏窄屏上的视觉大小保持一致。</p>
<h5 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h5><ul>
<li>设置 viewport 宽度为 device-width，以保证 px 为单位取值的一些文字图标等网页内容视觉大小符合预期且宽窄屏大小一致。（ css 中的 px 取值需按一倍屏的 UI 稿来写）。</li>
<li>布局方案灵活使用相对单位 %/float/flex 等，以保证布局的横向伸缩和容器内各元素的大小间距符合预期；</li>
<li>组合包裹相关元素，并相对某一方向做定位，以保证宽度变化时的定位稳定。</li>
</ul>
<h4 id="等比缩放式"><a href="#等比缩放式" class="headerlink" title="等比缩放式"></a>等比缩放式</h4><p>等比缩放式适配需求，广泛应用于各种产品类、运营类等业务场景。<br>其布局特点简单粗暴，就是根据屏幕宽度整个页面等比缩放。</p>
<h6 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h6><p>rem 是 css3 新增的相对于根元素 html 的 font-size 计算值的大小的倍数单位。</p>
<ul>
<li>设置 viewport 宽度为 device-width 或其他固定值，以得到 px 为单位的文字、图标或边线等效果</li>
<li>css 单位使用 rem，js 根据 viewport 宽度以及 css 中的 rem的换算系数，动态计算并设置 html 根节点 font-size，以实现整个页面内容的等比例缩放。</li>
</ul>
<blockquote>
<p>rem 为基础的动态适配方案<br>设：横向满屏的 rem 个数预定为 remCount，标注稿总宽度 px 为 uiWidth，标注稿内某元素宽度为 uiEleWidth。<br>那么：<br>● 设计稿中 1rem 表示的 px 数 uiPX1rem = uiWidth/remCount<br>● CSS 中某元素 rem 的值 cssEleWidth= uiEleWidth/uiPX1rem<br>● JS 中根节点的 fontSize = document.documentElement.clientWidth/remCount</p>
</blockquote>
<p>github 中近 1 万 star 的 js 库lib-flexible 便是采用的此方案。</p>
<h6 id="viewport-units"><a href="#viewport-units" class="headerlink" title="viewport units"></a>viewport units</h6><p>1vw 即表示当前视口宽度的 1%，我们可以利用这一点替代“rem+根节点 font-size”的等比缩放实现。<br>举个例子，750px 的 UI 稿中，宽度 75px 的按钮，在 css 中的宽度描述即为：width:10vw。</p>
<h6 id="viewport-meta-only"><a href="#viewport-meta-only" class="headerlink" title="viewport meta only"></a>viewport meta only</h6><h2 id="h5与原生如何交互"><a href="#h5与原生如何交互" class="headerlink" title="h5与原生如何交互"></a>h5与原生如何交互</h2><ol>
<li>app调用h5的代码</li>
</ol>
<p>因为app是宿主，可以直接访问h5，所以这种调用比较简单，就是在h5中暴露一些全局对象（包括方法），然后在原生app中调用这些对象。</p>
<ol start="2">
<li>h5调用app的代码</li>
</ol>
<ul>
<li>由app向h5注入一个全局的js对象，然后在h5直接访问这个对象</li>
<li>由h5发起一个自定义协议请求，app拦截这个请求后，再由app调用h5中的回调函数</li>
</ul>
<h2 id="什么是-“React-Fiber”？"><a href="#什么是-“React-Fiber”？" class="headerlink" title="什么是 “React Fiber”？"></a>什么是 “React Fiber”？</h2><p>Fiber 是 React 16 中新的协调引擎。它的主要目的是使 Virtual DOM 可以进行增量式渲染。</p>
<h2 id="HOC-是什么？相比-mixins-有什么优点？"><a href="#HOC-是什么？相比-mixins-有什么优点？" class="headerlink" title="HOC 是什么？相比 mixins 有什么优点？"></a>HOC 是什么？相比 mixins 有什么优点？</h2><p>React 的思想中是存在函数式编程的，高阶组件和高阶函数就是同一个东西。我们实现一个函数，传入一个组件，然后在函数内部再实现一个函数去扩展传入的组件，最后返回一个新的组件，这就是高阶组件的概念，作用就是为了更好的复用代码。</p>
<p>其实 HOC 和 Vue 中的 mixins 作用是一致的，并且在早期 React 也是使用 mixins 的方式。但是在使用 class 的方式创建组件以后，mixins 的方式就不能使用了，并且其实 mixins 也是存在一些问题的，比如：</p>
<ul>
<li>隐含了一些依赖，比如我在组件中写了某个 state 并且在 mixin 中使用了，就这存在了一个依赖关系。万一下次别人要移除它，就得去 mixin 中查找依赖</li>
<li>多个 mixin 中可能存在相同命名的函数，同时代码组件中也不能出现相同命名的函数，否则就是重写了，其实我一直觉得命名真的是一件麻烦事。</li>
<li>雪球效应，虽然我一个组件还是使用着同一个 mixin，但是一个 mixin 会被多个组件使用，可能会存在需求使得 mixin 修改原本的函数或者新增更多的函数，这样可能就会产生一个维护成本</li>
</ul>
<p>HOC 解决了这些问题，并且它们达成的效果也是一致的，同时也更加的政治正确（毕竟更加函数式了）。</p>
<h2 id="什么是作用域链"><a href="#什么是作用域链" class="headerlink" title="什么是作用域链?"></a>什么是作用域链?</h2><p>当代码在一个环境中执行时，会创建变量对象的一个作用域链。</p>
<p><strong>什么是作用域</strong></p>
<p>变量的作用域分为两种：全局变量和局部变量。<br>1、全局作用域： 最外层函数定义的变量拥有全局作用域，即对任何内部函数来说，都是可以访问的；<br>2、局部作用域： 局部作用域一般只在固定的代码片段内可访问到，而对于函数外部是无法访问的，最常见的例如函数内部。</p>
<h2 id="webpack-优化-webpack4-与-webpack3-的区别"><a href="#webpack-优化-webpack4-与-webpack3-的区别" class="headerlink" title="webpack 优化, webpack4 与 webpack3 的区别"></a>webpack 优化, webpack4 与 webpack3 的区别</h2>]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>NextTick 原理分析</title>
    <url>/2019/06/13/2019/June/NextTick/README/</url>
    <content><![CDATA[<h1 id="NextTick-原理分析"><a href="#NextTick-原理分析" class="headerlink" title="NextTick 原理分析"></a>NextTick 原理分析</h1><p>nextTick可以让我们在下次DOM更新循环结束之后执行延迟回调，用于获得更新后的DOM。</p>
<p>在Vue2.4之前都是使用的microtasks，但是microtasks的优先级过高，在某些情况下可能会出现比事件冒泡更快的情况，但如果都是macrotasks又可能会出现渲染的性能问题。所以在新版本中，会默认使用microtasks，但在特殊情况下会使用macrotasks，比如v-on。</p>
<p>对于实现macrotasks，会先判断是否能使用setImmediate，不能的话降级为MessageChannel，以上都不行的话就使用setTimeout。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">'undefined'</span> &amp;&amp; isNative(setImmediate)) &#123;</span><br><span class="line">  macroTimerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setImmediate(flushCallbacks)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">  <span class="keyword">typeof</span> MessageChannel !== <span class="string">'undefined'</span> &amp;&amp;</span><br><span class="line">  (isNative(MessageChannel) ||</span><br><span class="line">    <span class="comment">// PhantomJS</span></span><br><span class="line">    MessageChannel.toString() === <span class="string">'[object MessageChannelConstructor]'</span>)</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">const</span> channel = <span class="keyword">new</span> MessageChannel()</span><br><span class="line">  <span class="keyword">const</span> port = channel.port2</span><br><span class="line">  channel.port1.onmessage = flushCallbacks</span><br><span class="line">  macroTimerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    port.postMessage(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  macroTimerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(flushCallbacks, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码用来判断能不能使用相应的API。</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul>
<li>macrotasks（宏任务）： setTimeout, setInterval, setImmediate, I/O, UI rendering</li>
<li>microtasks（微任务）： process.nextTick, Promise, MutationObserver</li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>git的基本操作</title>
    <url>/2019/06/09/2019/June/git/README/</url>
    <content><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><ul>
<li><a href="#rebase-%E5%90%88%E5%B9%B6">Rebase 合并</a></li>
<li><a href="#stash">stash</a></li>
<li><a href="#reflog">reflog</a></li>
<li><a href="#reset">Reset</a></li>
</ul>
<h2 id="Rebase-合并"><a href="#Rebase-合并" class="headerlink" title="Rebase 合并"></a>Rebase 合并</h2><p>该命令可以让和 <code>merge</code> 命令得到的结果基本是一致的。</p>
<p>通常使用 <code>merge</code> 操作将分支上的代码合并到 <code>master</code> 中，分支样子如下所示</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/23/162f109db27be054?w=505&amp;h=461&amp;f=png&amp;s=22796" alt=""></p>
<p>使用 <code>rebase</code> 后，会将 <code>develop</code> 上的 <code>commit</code> 按顺序移到 <code>master</code> 的第三个 <code>commit</code> 后面，分支样子如下所示</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/23/162f11cc2cb8b332?w=505&amp;h=563&amp;f=png&amp;s=26514" alt=""></p>
<p>Rebase 对比 merge，优势在于合并后的结果很清晰，只有一条线，劣势在于如果一旦出现冲突，解决冲突很麻烦，可能要解决多个冲突，但是 merge 出现冲突只需要解决一次。</p>
<p>使用 rebase 应该在需要被 rebase 的分支上操作，并且该分支是本地分支。如果 <code>develop</code> 分支需要 rebase 到 <code>master</code> 上去，那么应该如下操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># branch develop</span></span></span><br><span class="line">git rebase master</span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 用于将 `master` 上的 HEAD 移动到最新的 commit</span></span></span><br><span class="line">git merge develop</span><br></pre></td></tr></table></figure>
<h2 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h2><p><code>stash</code> 用于临时报错工作目录的改动。开发中可能会遇到代码写一半需要切分支打包的问题，如果这时候你不想 <code>commit</code> 的话，就可以使用该命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure>
<p>使用该命令可以暂存你的工作目录，后面想恢复工作目录，只需要使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash apply</span><br></pre></td></tr></table></figure>
<p>使用apply命令恢复，stash列表中的信息是会继续保留的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure>
<p>使用pop恢复，并且会删除暂存列表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure>
<p>查看暂存列表</p>
<h2 id="reflog"><a href="#reflog" class="headerlink" title="reflog"></a>reflog</h2><p><code>reflog</code> 可以看到 HEAD 的移动记录，假如之前误删了一个分支，可以通过 <code>git reflog</code> 看到移动 HEAD 的哈希值</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/23/162f14df98ce3d83?w=950&amp;h=118&amp;f=png&amp;s=77151" alt=""></p>
<p>从图中可以看出，HEAD 的最后一次移动行为是 <code>merge</code> 后，接下来分支 <code>new</code> 就被删除了，那么我们可以通过以下命令找回 <code>new</code> 分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout 37d9aca</span><br><span class="line">git checkout -b new</span><br></pre></td></tr></table></figure>
<p>PS：<code>reflog</code> 记录是时效的，只会保存一段时间内的记录。</p>
<h2 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h2><p>如果你想删除刚写的 commit，就可以通过以下命令实现</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>
<p>但是 <code>reset</code> 的本质并不是删除了 commit，而是重新设置了 HEAD 和它指向的 branch。</p>
<h1 id="git-常用操作"><a href="#git-常用操作" class="headerlink" title="git 常用操作"></a>git 常用操作</h1><p>$ git ch(checkout) -b develop  创建开发分支develop</p>
<p>$ git push  推送当前分支到远端仓库</p>
<p>$ git st(status)  查看当前分支工作区、暂存区的工作状态</p>
<p>$ git diff   diff文件的修改</p>
<p>$ git ci(commit) .  提交本次修改</p>
<p>$ git fetch –all  拉取所有远端的最新代码</p>
<p>$ git merge origin/develop  如果是多人协作，merge同事的修改到当前分支（先人后己原则）</p>
<p>$ git merge origin/master   上线之前保证当前分支不落后于远端origin/master，一定要merge远端origin/master到当前分支</p>
<p>$ git push  推送当前分支到远端仓库</p>
<p>$ git merge –no-ff origin/develop  同事review code之后管理员合并origin/develop到远端主干origin/master</p>
<hr>
<p>👉 HEAD：当前commit引用$ git version  git版本</p>
<p>$ git branch  查看本地所有的分支</p>
<p>$ git branch -r 查看所有远程的分支</p>
<p>$ git branch -a 查看所有远程分支和本地分支</p>
<p>$ git branch -d <branchname> 删除本地branchname分支</branchname></p>
<p>$ git branch -m brancholdname  branchnewname 重命名分支</p>
<p>$ git branch <branchname>   创建branchname分支</branchname></p>
<p>$ git checkout <branchname> 切换分支到branchname</branchname></p>
<p>$ git checkout -b <branchname> 等同于执行上两步，即创建新的分支并切换到该分支</branchname></p>
<p>$ git checkout – xx/xx  撤销本文件的更改</p>
<p>$ git pull origin master:master 将远程origin主机的master分支合并到当前master分支,冒号后面的部分表示当前本地所在的分支</p>
<p>$ git pull origin master –allow-unrelated-histories  允许合并两个不同项目的历史记录</p>
<p>$ git push origin -d <branchname>   删除远程branchname分支</branchname></p>
<p>$ git fetch –p  更新分支</p>
<p>$ git status 查看本地工作区、暂存区文件的修改状态</p>
<p>$ git add xx  把xx文件添加到暂存区去</p>
<p>$ git commit -m ‘ ‘  提交文件 -m 后面的是注释</p>
<p>$ git commit -am(-a -m) 提交所有的修改，等同于上两步</p>
<p>$ git commit ./xx   等同于git add ./xx + git commit</p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>构造方法constructor</title>
    <url>/2019/05/03/2019/May/Classes/README/</url>
    <content><![CDATA[<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>constructor是一种用于创建和初始化class创建的对象的特殊方法。<br><strong>描述</strong></p>
<ol>
<li>在一个类中只能有一个名叫”constructor”的特殊方法。一个类中出现多次将会抛出SyntaxError错误。</li>
<li>在一个构造方法中可以使用super关键字来调用一个父类的构造方法</li>
<li>如果没有显示指定构造方法，则会添加默认的construtor方法。</li>
<li>如果不指定一个构造函数（constructor）方法，则使用一个默认的构造函数（constructor）</li>
</ol>
<blockquote>
<p>如果不指定构造方法，则使用默认构造函数。对于基类，默认构造函数是：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>() &#123;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对于派生类，默认构造函数是：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">  <span class="keyword">super</span>(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><p>extends关键字用于类声明或者类表达式中，以创建一个类，该类是另一个类的子类。<br><strong>描述</strong></p>
<p>extends关键字用来创建一个普通类或者内建对象的子类<br>继承的.prototype必须是一个Object或者null。</p>
<h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>类（class）通过static关键字定义静态方法。不能在类的实例上调用静态方法，而应该通过类本身调用。这些通常是实用程序方法，例如创建或克隆对象的功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassWithStaticMethod</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> staticMethod() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'static method has been called.'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ClassWithStaticMethod.staticMethod();</span><br></pre></td></tr></table></figure>
<h3 id="调用静态方法"><a href="#调用静态方法" class="headerlink" title="调用静态方法"></a>调用静态方法</h3><ul>
<li>从另一个静态方法，静态方法调用同一个类中的其他静态方法，可使用this关键字</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticMethodCall</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> staticMethod() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Static method has been called'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> anotherStaticMethod() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.staticMethod() + <span class="string">' from another static method'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>从类的构造函数和其他方法，非静态方法中，不能直接使用this关键字来访问静态方法。而是要用类名来调用；<br>CLASSNAME.STATIC_METHOD_NAME()，或者用构造函数的属性来调用该方法；this.constructor.STATIC_METHOD_NAME()。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticMethodCall</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(StaticMethodCall.staticMethod());</span><br><span class="line">        <span class="comment">// 'static method has been called.'</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.constructor.staticMethod());</span><br><span class="line">        <span class="comment">// 'static method has been called.'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> staticMethod() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'static method has been called.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><ol>
<li>目前ECMAScript，class中还没有定义Private（私有属性）的能力，所以我们通过约定，用下划线来标记它们。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  _milesDriven = <span class="number">0</span>;</span><br><span class="line">  drive(distance) &#123;</span><br><span class="line">    <span class="keyword">this</span>._milesDriven += distance;</span><br><span class="line">  &#125;</span><br><span class="line">  getMilesDriven() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._milesDriven;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的事例中，我们依靠Car的实例调用getMilesDriven方法来获取到它的私有属性_milesDriven。但是，因为没有什么能使_milesDriven成为私有的，<br>所以任何实例都可以访问它。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tesla = <span class="keyword">new</span> Cal();</span><br><span class="line">tesla.drive(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(tesla._milesDriven);</span><br></pre></td></tr></table></figure>
<p>目前Class Fields有个提案，我们可以通过#创建私有字段。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  #milesDriven = 0;</span><br><span class="line">  drive(distance) &#123;</span><br><span class="line">    this.#milesDriven += distance;</span><br><span class="line">  &#125;</span><br><span class="line">  getMilesDriven() &#123;</span><br><span class="line">    return this.#milesDriven;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tesla = <span class="keyword">new</span> Car()</span><br><span class="line">tesla.drive(<span class="number">10</span>)</span><br><span class="line">tesla.getMilesDriven() <span class="comment">// 10</span></span><br><span class="line">tesla.#milesDriven // Invalid</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的浏览器兼容问题</title>
    <url>/2019/05/05/2019/May/Compatible/README/</url>
    <content><![CDATA[<h2 id="常见的浏览器兼容问题"><a href="#常见的浏览器兼容问题" class="headerlink" title="常见的浏览器兼容问题"></a>常见的浏览器兼容问题</h2><h3 id="html中的兼容问题"><a href="#html中的兼容问题" class="headerlink" title="html中的兼容问题"></a>html中的兼容问题</h3><h4 id="不同浏览器的标签默认的外补丁和内补丁不同"><a href="#不同浏览器的标签默认的外补丁和内补丁不同" class="headerlink" title="不同浏览器的标签默认的外补丁和内补丁不同"></a>不同浏览器的标签默认的外补丁和内补丁不同</h4><ul>
<li>场景：随便写几个标签，不加样式控制的情况下，各自的margin和padding差异较大。</li>
<li>解决方法：上来先消除默认样式* {margin: 0, padding: 0}</li>
</ul>
<h4 id="块属性标签float后，又有横行的margin的情况下，在IE6显示margin比设置的大（即双倍边距bug）"><a href="#块属性标签float后，又有横行的margin的情况下，在IE6显示margin比设置的大（即双倍边距bug）" class="headerlink" title="块属性标签float后，又有横行的margin的情况下，在IE6显示margin比设置的大（即双倍边距bug）"></a>块属性标签float后，又有横行的margin的情况下，在IE6显示margin比设置的大（即双倍边距bug）</h4><ul>
<li>场景：常见症状是IE6后面的一块被顶到下一行;</li>
<li>解决方法：在float的标签样式控制中加入display: inline-block; 将其转化为行内属性</li>
</ul>
<h4 id="IE6-中z-index失效"><a href="#IE6-中z-index失效" class="headerlink" title="IE6 中z-index失效"></a>IE6 中z-index失效</h4><ul>
<li>场景：元素的父级元素设置的z-index为1，那么其子级元素再设置z-index时会失效，其层级会继承父级元素的设置，造成某些层级调整上的bug</li>
<li>原因：z-index起作用有个前提，就是元素的position属性要是relative、absolute或者fixed。</li>
<li>解决方案：1. position: relative 改为 position: absolute; 2. 去除浮动; 3. 浮动元素添加position属性（如relative，absolute等）。</li>
</ul>
<h4 id="在写a标签的样式，写的样式没有效果，其实只是写的样式被覆盖了"><a href="#在写a标签的样式，写的样式没有效果，其实只是写的样式被覆盖了" class="headerlink" title="在写a标签的样式，写的样式没有效果，其实只是写的样式被覆盖了"></a>在写a标签的样式，写的样式没有效果，其实只是写的样式被覆盖了</h4><ul>
<li>正确的a标签顺序：link/visited/hover/active</li>
</ul>
<h4 id="24位png图片，IE6中不兼容透明底儿"><a href="#24位png图片，IE6中不兼容透明底儿" class="headerlink" title="24位png图片，IE6中不兼容透明底儿"></a>24位png图片，IE6中不兼容透明底儿</h4><ul>
<li>解决方式：1. 使用8位png图片; 2. 为ie6准备一套特殊的图片</li>
</ul>
<h3 id="js在不同浏览器中的兼容问题"><a href="#js在不同浏览器中的兼容问题" class="headerlink" title="js在不同浏览器中的兼容问题"></a>js在不同浏览器中的兼容问题</h3><h4 id="事件监听的兼容"><a href="#事件监听的兼容" class="headerlink" title="事件监听的兼容"></a>事件监听的兼容</h4><ul>
<li>IE不支持addEventListener;</li>
<li>解决：给IE使用attachEvent</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> addHandler = <span class="function"><span class="keyword">function</span>(<span class="params">e, type, handler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.addEventListener) &#123;</span><br><span class="line">    e.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.attachEvent) &#123;</span><br><span class="line">    e.attachEvent(<span class="string">'on'</span> + type, handler);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    e[<span class="string">'on'</span> + type] = handler;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> removeHandler = <span class="function"><span class="keyword">function</span>(<span class="params">e, type, handler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.removeEventListener) &#123;</span><br><span class="line">    e.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.detachEvent) &#123;</span><br><span class="line">    e.detachEvent(<span class="string">'on'</span> + type, handler);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    on[<span class="string">'on'</span> + type] = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="event-target的兼容，引发事件的DOM元素。"><a href="#event-target的兼容，引发事件的DOM元素。" class="headerlink" title="event.target的兼容，引发事件的DOM元素。"></a>event.target的兼容，引发事件的DOM元素。</h4><ul>
<li>IE 6789不支持event.target</li>
<li>解决方法：event.srcElement;</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">target = event.target || event.srcElement;</span><br></pre></td></tr></table></figure>
<h4 id="阻止系统默认的兼容"><a href="#阻止系统默认的兼容" class="headerlink" title="阻止系统默认的兼容"></a>阻止系统默认的兼容</h4><ul>
<li>IE 6789不支持event.preventDefault;</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">event.preventDefault ? event.preventDefault() : event.returnValue = <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="阻止事件冒泡的兼容"><a href="#阻止事件冒泡的兼容" class="headerlink" title="阻止事件冒泡的兼容"></a>阻止事件冒泡的兼容</h4><ul>
<li>IE 6789不支持event.stopPropagation;</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">event.stopPropagation ? event.stopPropagation() : event.cancelBubble = <span class="literal">false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是函数柯里化？</title>
    <url>/2019/05/07/2019/May/Curry/README/</url>
    <content><![CDATA[<h2 id="什么是函数柯里化？实现-sum-1-2-3-返回结果是1-2-3之和"><a href="#什么是函数柯里化？实现-sum-1-2-3-返回结果是1-2-3之和" class="headerlink" title="什么是函数柯里化？实现 sum(1)(2)(3) 返回结果是1,2,3之和"></a>什么是函数柯里化？实现 sum(1)(2)(3) 返回结果是1,2,3之和</h2><p>函数柯里化：把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a+b+c;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="引申：实现一个curry函数，将普通函数进行柯里化"><a href="#引申：实现一个curry函数，将普通函数进行柯里化" class="headerlink" title="引申：实现一个curry函数，将普通函数进行柯里化"></a>引申：实现一个curry函数，将普通函数进行柯里化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, args = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rest = [...args, ...arguments];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rest.length &lt; fn.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> curry.call(<span class="keyword">this</span>, fn, rest);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, rest);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b,c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sumFn = curry(sum);</span><br><span class="line"><span class="built_in">console</span>.log(sumFn(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">//6</span></span><br><span class="line"><span class="built_in">console</span>.log(sumFn(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">//6</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>call、apply有什么区别？call、apply和bind的内部实现</title>
    <url>/2019/05/01/2019/May/Bind/README/</url>
    <content><![CDATA[<h1 id="call、apply有什么区别？call、apply和bind的内部实现"><a href="#call、apply有什么区别？call、apply和bind的内部实现" class="headerlink" title="call、apply有什么区别？call、apply和bind的内部实现"></a>call、apply有什么区别？call、apply和bind的内部实现</h1><p>call、apply的功能相同，区别在于传参的方式不一样：</p>
<ul>
<li>fn.call(obj, arg1, arg2, …)，调用一个函数，具有一个指定的this值和分别提供的参数（参数的列表）。</li>
<li>fn.apply(obj, [argsArray])，调用一个函数，具有一个指定的this值，以及作为一个数组（或类数组对象）提供参数。</li>
</ul>
<h2 id="call核心"><a href="#call核心" class="headerlink" title="call核心"></a>call核心</h2><ul>
<li>将函数设为传入参数的属性</li>
<li>指定this到函数并传入给定参数执行函数</li>
<li>如果不传入参数或者参数为null，默认指向为 window/global</li>
<li>删除参数上的函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 如果第一个参数传入的是 null 或者 undefined，那么this指向 window/global</span></span><br><span class="line"><span class="comment">   * 如果第一个参数传入的不是 null 或者 undefined，那么必须是一个对象</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">if</span> (!context) &#123;</span><br><span class="line">    <span class="comment">//  context为null或者是undefined</span></span><br><span class="line">    <span class="comment">//  判断是浏览器环境还是node环境</span></span><br><span class="line">    context = <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">'undefined'</span> ? global : <span class="built_in">window</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  context.fn = <span class="keyword">this</span>;  <span class="comment">//  this指向是当前的函数（Function的实例）</span></span><br><span class="line">  <span class="keyword">let</span> rest = [...arguments].slice(<span class="number">1</span>); <span class="comment">//  获取除了this指向对象以外的参数，空数组slice后返回的仍然是空数组</span></span><br><span class="line">  <span class="keyword">let</span> result = context.fn(...rest); <span class="comment">//  隐式绑定，当前函数的this指向了context</span></span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test code</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'Selina'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Chirs'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">job, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  <span class="built_in">console</span>.log(job, age);</span><br><span class="line">&#125;</span><br><span class="line">bar.call(foo, <span class="string">'programmer'</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">//  Selina programmer, 20</span></span><br><span class="line">bar.call(<span class="literal">null</span>, <span class="string">'teacher'</span>, <span class="number">25</span>);</span><br><span class="line"><span class="comment">//  brower环境： Chirs teacher, 25； node环境： undefined teacher, 25</span></span><br></pre></td></tr></table></figure>
<h2 id="apply核心"><a href="#apply核心" class="headerlink" title="apply核心"></a>apply核心</h2><p>apply的实现和call很类似，但是需要注意他们的参数不一样，apply的第二个参数是数组或类数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.apply = <span class="function"><span class="keyword">function</span>(<span class="params">context, rest</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 如果第一个参数传入的是 null 或者 undefined，那么this指向 window/global</span></span><br><span class="line"><span class="comment">   * 如果第一个参数传入的不是 null 或者 undefined，那么必须是一个对象</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">if</span> (!context) &#123;</span><br><span class="line">    <span class="comment">//  context为null或者是undefined</span></span><br><span class="line">    <span class="comment">//  判断是浏览器环境还是node环境</span></span><br><span class="line">    context = <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">'undefined'</span> ? global : <span class="built_in">window</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">if</span> (rest == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">//  undefined 或者 null 不是 Iterator 对象，不能被...</span></span><br><span class="line">    result = context.fn(rest);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> rest === <span class="string">'object'</span>) &#123;</span><br><span class="line">    result = context.fn(...rest);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> result.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test code</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'Selina'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Chirs'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">job, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  <span class="built_in">console</span>.log(job, age);</span><br><span class="line">&#125;</span><br><span class="line">bar.apply(foo, [<span class="string">'programmer'</span>, <span class="number">20</span>]);</span><br><span class="line"><span class="comment">//  Selina programmer, 20</span></span><br><span class="line">bar.apply(<span class="literal">null</span>, [<span class="string">'teacher'</span>, <span class="number">25</span>]);</span><br><span class="line"><span class="comment">// brower环境： Chirs teacher, 25； node环境： undefined teacher, 25</span></span><br></pre></td></tr></table></figure>
<h2 id="bind核心"><a href="#bind核心" class="headerlink" title="bind核心"></a>bind核心</h2><p>bind 和 call/apply 有一个很重要的区别，一个函数被 call/apply 的时候，会直接调用，但是 bind会创建一个新函数。当这个新函数被调用时，bind()的第一个参数将<br>作为它运行时的this，之后的一系列参数将会在传递的实参前传入作为它的参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'not a function'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> args = [...arguments].slice(<span class="number">1</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  Fn.prototype = <span class="keyword">this</span>.prototype;</span><br><span class="line">  <span class="keyword">let</span> bound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [...args, ...arguments];  <span class="comment">//  bind传递的参数和函数调用时传递的参数拼接</span></span><br><span class="line">    context = <span class="keyword">this</span> <span class="keyword">instanceof</span> Fn ? <span class="keyword">this</span> : context || <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context, res);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  原型链</span></span><br><span class="line">  bound.prototype = <span class="keyword">new</span> Fn();</span><br><span class="line">  <span class="keyword">return</span> bound;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Jack'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">age, job, gender</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name , age, job, gender);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Yve = &#123;<span class="attr">name</span> : <span class="string">'Yvette'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> result = person.bind(Yve, <span class="number">22</span>, <span class="string">'enginner'</span>)(<span class="string">'female'</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>修饰器的使用</title>
    <url>/2019/05/09/2019/May/Decorator/README/</url>
    <content><![CDATA[<p>由于使用了decorator, node不用正常识别，需要使用babel转换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ babel-node test.js</span><br></pre></td></tr></table></figure>
<h3 id="1-类修饰器（只有一个参数）"><a href="#1-类修饰器（只有一个参数）" class="headerlink" title="1. 类修饰器（只有一个参数）"></a>1. 类修饰器（只有一个参数）</h3><p>target: 指向类，如果是类型是function，则指向MyFunction.prototype</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testable</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  target.isTestable = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@testabel</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTestableClass</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码，@testable就是一个装饰器，它为MyTestableClass这个类添加了一个静态属性isTestable</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testable</span>(<span class="params">isTestable</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    target.isTestable = isTestable;</span><br><span class="line">    target.prototype.name = <span class="string">'achen'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@testabel(<span class="literal">false</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTestabelClass</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码，告诉我们@testable何如传递参数，并且如何为类添加原型属性或者方法。</p>
<h3 id="2-方法修饰器（有三个参数）"><a href="#2-方法修饰器（有三个参数）" class="headerlink" title="2. 方法修饰器（有三个参数）"></a>2. 方法修饰器（有三个参数）</h3><p>target: 方法所在的类<br>name: 方法名称<br>descriptor: 描述对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line">  @log</span><br><span class="line">  add(a, b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">target, name, descriptor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oldValue = descriptor.value;</span><br><span class="line"></span><br><span class="line">  descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Calling <span class="subst">$&#123;name&#125;</span> with`</span>, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> math = <span class="keyword">new</span> <span class="built_in">Math</span>();</span><br><span class="line"></span><br><span class="line">math.add(<span class="number">2</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<h4 id="为什么修饰器不能用于函数？"><a href="#为什么修饰器不能用于函数？" class="headerlink" title="为什么修饰器不能用于函数？"></a>为什么修饰器不能用于函数？</h4><p>修饰器只能用于类和类的方法，不能用于函数，因为存在函数提升</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> conuter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@add</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS继承的实现方式</title>
    <url>/2019/05/11/2019/May/Extends/README/</url>
    <content><![CDATA[<h2 id="JS继承的实现方式"><a href="#JS继承的实现方式" class="headerlink" title="JS继承的实现方式"></a>JS继承的实现方式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'Animal'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.sleep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'~~~'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' eat: '</span> + food);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h3><p>核心： 将父类的实例作为子类的原型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line">Cat.prototype.name = <span class="string">'cat'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name); <span class="comment">// cat</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.eat(<span class="string">'fish'</span>)); <span class="comment">// cat eat: fish</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep()); <span class="comment">//  cat~~~</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">//  true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat);  <span class="comment">//  true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>特点：</p>
</blockquote>
<ol>
<li>非常纯粹的继承关系，实例是子类的实例，也是父类的实例</li>
<li>父类新增原型方法/原型属性，子类都能访问到</li>
<li>简单，易于实现</li>
</ol>
<blockquote>
<p>缺点：</p>
</blockquote>
<ol>
<li>要想为子类新增属性和方法，必须要在new Animal()这样的语句之后执行，不能放到构造器中</li>
<li>无法实现多继承</li>
<li>来自原型对象的所有属性被所有实例共享</li>
<li>创建子类实例时，无法向父类构造函数传参</li>
</ol>
<h3 id="2-构造继承"><a href="#2-构造继承" class="headerlink" title="2. 构造继承"></a>2. 构造继承</h3><p>核心：使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类（没用到原型）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Animal.apply(<span class="keyword">this</span>);  <span class="comment">// Animal.call(this);</span></span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'cat'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);  <span class="comment">//  cat</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep()); <span class="comment">//  cat~~~</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal);   <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>特点：</p>
</blockquote>
<ol>
<li>解决了1中，子类实例共享父类引用属性的问题</li>
<li>创建子类实例时，可以向父类传递参数</li>
<li>可以实现多继承（call多个父类对象）</li>
</ol>
<blockquote>
<p>缺点：</p>
</blockquote>
<ol>
<li>实例并不是父类的实例，只是子类的实例</li>
<li>只能继承父类的实例属性和方法，不能继承原型属性/方法</li>
<li>无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</li>
</ol>
<h3 id="3-实例继承"><a href="#3-实例继承" class="headerlink" title="3. 实例继承"></a>3. 实例继承</h3><p>核心：为父类实例添加新特性，做为子类实例返回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="keyword">new</span> Animal();</span><br><span class="line">  instance.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);  <span class="comment">//  Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep()); <span class="comment">//  Tom~~~</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat);  <span class="comment">//  false</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>特点：</p>
</blockquote>
<ol>
<li>不限制调用方式，不管事new 子类（）还是子类（），返回的对象具有相同的效果</li>
</ol>
<blockquote>
<p>缺点：</p>
</blockquote>
<ol>
<li>实例是父类的实例，不是子类的实例</li>
<li>不支持多继承</li>
</ol>
<h3 id="4-拷贝继承"><a href="#4-拷贝继承" class="headerlink" title="4. 拷贝继承"></a>4. 拷贝继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> animal) &#123;</span><br><span class="line">    Cat.prototype[i] = animal[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Cat.prototype.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);  <span class="comment">//  Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep()); <span class="comment">//  Tom~~~</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat);  <span class="comment">//  true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>特点：</p>
</blockquote>
<ol>
<li>支持多继承</li>
</ol>
<blockquote>
<p>缺点：</p>
</blockquote>
<ol>
<li>效率较低，内存占用高（因为要拷贝父类的属性）</li>
<li>无法获取父类不可枚举的方法（不可枚举方法，不能使用for in 访问到）</li>
</ol>
<h3 id="5-组合继承"><a href="#5-组合继承" class="headerlink" title="5. 组合继承"></a>5. 组合继承</h3><p>核心：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line">Cat.prototype.constructor = Cat;  <span class="comment">//  修复Cat的构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);  <span class="comment">//  Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep()); <span class="comment">//  Tom~~~</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal);   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>特点：</p>
</blockquote>
<ol>
<li>弥补了方式2的缺陷，可以继承实例属性/方法，也可以继承原型属性/方法</li>
<li>既是子类的实例，也是父类的实例</li>
<li>不存在引用属性共享问题</li>
<li>可传参</li>
<li>函数可复用</li>
</ol>
<blockquote>
<p>缺点：</p>
</blockquote>
<ol>
<li>调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了）</li>
</ol>
<h3 id="6-寄生组合继承"><a href="#6-寄生组合继承" class="headerlink" title="6. 寄生组合继承"></a>6. 寄生组合继承</h3><p>核心：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  创建一个没有实例方法的类</span></span><br><span class="line">  <span class="keyword">var</span> Super = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  Super.prototype = Animal.prototype;</span><br><span class="line">  <span class="comment">//  将实例作为子类的原型</span></span><br><span class="line">  Cat.prototype = <span class="keyword">new</span> Super();</span><br><span class="line">  Cat.prototype.constructor = Cat;  <span class="comment">//  修复Cat的构造函数</span></span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);  <span class="comment">//  Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep()); <span class="comment">//  Tom~~~</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>特点：</p>
</blockquote>
<ol>
<li>堪称完美</li>
</ol>
<blockquote>
<p>缺点：</p>
</blockquote>
<ol>
<li>实现较为复杂</li>
</ol>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>如何写一个jQuery插件</title>
    <url>/2019/05/13/2019/May/JqPlugin/README/</url>
    <content><![CDATA[<h2 id="如何写一个jQuery插件"><a href="#如何写一个jQuery插件" class="headerlink" title="如何写一个jQuery插件"></a>如何写一个jQuery插件</h2><h3 id="jQuery-插件开发模式"><a href="#jQuery-插件开发模式" class="headerlink" title="jQuery 插件开发模式"></a>jQuery 插件开发模式</h3><p>jQuery的插件开发模式主要有三种：</p>
<ul>
<li>通过$.extend()来扩展jQuery</li>
<li>通过$.fn向jQuery添加新的方法</li>
<li>通过$.widget()应用jQuery UI的部件工厂方式创建</li>
</ul>
<h4 id="extend"><a href="#extend" class="headerlink" title="$.extend()"></a>$.extend()</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.fn.extend(&#123;</span><br><span class="line"> check: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.checked = <span class="literal">true</span>;</span><br><span class="line">    &#125;),</span><br><span class="line"> &#125;</span><br><span class="line"> uncheck: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.checked = <span class="literal">false</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">"input[type='checkbox']"</span>).check();</span><br></pre></td></tr></table></figure>
<h4 id="fn"><a href="#fn" class="headerlink" title="$.fn"></a>$.fn</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myPlugin</span>(<span class="params">$ele, options</span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">myPlugin.prototype = &#123;</span><br><span class="line">  method1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  method2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$.fn.myplugin = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> myPlugin(<span class="keyword">this</span>, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>This</title>
    <url>/2019/05/17/2019/May/This/README/</url>
    <content><![CDATA[<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ol>
<li>默认绑定</li>
<li>隐式绑定</li>
<li>硬绑定</li>
<li>new绑定</li>
</ol>
<h3 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h3><p>默认绑定，在不能应用其他绑定规则时使用的默认规则，通常是独立函数调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>, <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'achen'</span>;</span><br><span class="line">sayHi();</span><br></pre></td></tr></table></figure>
<p>在调用sayHi()时，应用了默认绑定，this指向全局对象（非严格模式下），严格模式下，this指向undefined，undefined上没有this对象，会抛出错误。<br>上面的代码，如果在浏览器环境中运行，那么结果是 Hello, achen<br>但是如果在node环境中运行，结果就是Hello, undefined，这是因为node中name并不是挂在全局对象上的。</p>
<h3 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h3><p>函数的调用是在某个对象上触发的，即调用位置上存在上下文对象。典型的形式为 XXX.fun()。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>, <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">'achen'</span>,</span><br><span class="line">  sayHi: sayHi</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'achenjs'</span>;</span><br><span class="line">persin.sayHi();</span><br></pre></td></tr></table></figure>
<h3 id="硬绑定（显示绑定）"><a href="#硬绑定（显示绑定）" class="headerlink" title="硬绑定（显示绑定）"></a>硬绑定（显示绑定）</h3><p>通过call，apply，bind的方式，显示的指定this所指向的对象。<br>call，apply，bind的第一个参数，就是对应函数的this所指向的对象。call和apply的作用一样，只是传参方式不同。call和apply都会执行对应的函数，而bind方法不会。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>, <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'YvetteLau'</span>,</span><br><span class="line">    sayHi: sayHi</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Wiliam'</span>;</span><br><span class="line"><span class="keyword">var</span> Hi = person.sayHi;</span><br><span class="line">Hi.call(person);  <span class="comment">// Hi.apply(person)</span></span><br></pre></td></tr></table></figure>
<h3 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h3><blockquote>
<p>使用new来调用函数，会自动执行下面的操作：</p>
</blockquote>
<ol>
<li>创建一个新对象</li>
<li>将构造函数的作用域赋值给新对象，即this指向这个新对象</li>
<li>执行构造函数中的代码</li>
<li>返回新对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Hi = <span class="keyword">new</span> SayHi(<span class="string">'achen'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Hi.name);   <span class="comment">//  achen</span></span><br></pre></td></tr></table></figure>
<p>输出结果为achen，原因是因为在var Hi = new SayHi(‘achen’); 这一步，会将SayHi中的this绑定到Hi对象上。</p>
<h4 id="绑定优先级"><a href="#绑定优先级" class="headerlink" title="绑定优先级"></a>绑定优先级</h4><p>new绑定 &gt; 显示绑定 &gt; 隐式绑定 &gt; 默认绑定</p>
<h4 id="绑定另外"><a href="#绑定另外" class="headerlink" title="绑定另外"></a>绑定另外</h4><p>如果我们将null或者undefined作为this的绑定对象传入call、apply或者是bind，这些值在调用时会被忽略，实际应用的是默认绑定规则。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'Selina'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Chirs'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">bar.call(<span class="literal">null</span>);   <span class="comment">//  Chirs</span></span><br></pre></td></tr></table></figure>
<h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><p>箭头函数是ES6中新增的，它和普通函数有一些区别，箭头函数没有自己的this，它的this继承于外层代码库中的this。箭头函数在使用中，需要注意以下几点：</p>
<ol>
<li>函数体内的this对象，继承的是外层代码块的this。</li>
<li>不可以当做构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li>
<li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用rest参数代替。</li>
<li>不可以使用yield命令，因此箭头函数不能用作Generator函数。</li>
<li>箭头函数没有自己的this，所以不能用call、apply、bind这些方法改变this的指向。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  hi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  say: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> hi = obj.hi();          <span class="comment">//  obj</span></span><br><span class="line">hi();                       <span class="comment">//  obj</span></span><br><span class="line"><span class="keyword">let</span> sayHi = obj.sayHi();</span><br><span class="line"><span class="keyword">let</span> fun1 = sayHi();         <span class="comment">//  window</span></span><br><span class="line">fun1();                     <span class="comment">//  window</span></span><br><span class="line">obj.say();                  <span class="comment">//  window</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个promise</title>
    <url>/2019/05/15/2019/May/Promise/myPromise/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'PENDING'</span>;</span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">'RESOLVED'</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'REJECTED'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">  </span><br><span class="line">  that.value = <span class="literal">null</span>;</span><br><span class="line">  that.state = PENDING;</span><br><span class="line"></span><br><span class="line">  that.resolvedCallbacks = [];</span><br><span class="line">  that.rejectedCallbacks = [];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">      <span class="keyword">return</span> value.then(resolve, reject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (that.state === PENDING) &#123;</span><br><span class="line">      that.state = RESOLVED;</span><br><span class="line">      that.value = value;</span><br><span class="line">      that.resolvedCallbacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> cb(that.value));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (that.state === PENDING) &#123;</span><br><span class="line">      that.state = REJECTED;</span><br><span class="line">      that.value = value;</span><br><span class="line">      that.rejectedCallbacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> cb(that.value));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    fn(resolve, reject);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    reject(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> r</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (that.state === PENDING) &#123;</span><br><span class="line">    that.resolvedCallbacks.push(onFulfilled);</span><br><span class="line">    that.rejectedCallbacks.push(onRejected);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (that.state === RESOLVED) &#123;</span><br><span class="line">    onFulfilled(that.value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (that.state === REJECTED) &#123;</span><br><span class="line">    onRejected(that.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> that;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">111</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>从零配置webpack（基于webpack 4 和 babel 7版本）</title>
    <url>/2019/05/25/2019/May/Webpack/README/</url>
    <content><![CDATA[<h1 id="从零配置webpack（基于webpack-4-和-babel-7版本）"><a href="#从零配置webpack（基于webpack-4-和-babel-7版本）" class="headerlink" title="从零配置webpack（基于webpack 4 和 babel 7版本）"></a>从零配置webpack（基于webpack 4 和 babel 7版本）</h1><h2 id="webpack-核心概念"><a href="#webpack-核心概念" class="headerlink" title="webpack 核心概念"></a>webpack 核心概念</h2><ul>
<li>Entry: 入口</li>
<li>Module: 模块，webpack中一切皆是模块</li>
<li>Chunk: 代码库，一个chunk由十多个模块组合而成，用于代码合并与分割</li>
<li>Loader: 模块转换器，用于把模块原内容按照需求转换成新内容</li>
<li>Plugin: 扩展插件，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情</li>
<li>Output: 输出结果</li>
</ul>
<h2 id="webpack-流程"><a href="#webpack-流程" class="headerlink" title="webpack 流程"></a>webpack 流程</h2><p>webpack启动后会从Entry里配置的Module开始递归解析Entry依赖的所有Module。每找到一个Module，就会根据配置的Loader去找出对应的转换规则，对<br>Module进行转换后，再解析出当前的Module依赖的Module。这些模块会以Entry为单位进行分组，一个Entry和其所有依赖的Module被分到一个组也就是一个<br>Chunk。最好Webpack会把所有Chunk转换成文件输出。在整个流程中Webpack会在恰当的时机执行Plugin里定义的逻辑。</p>
<h2 id="最简webpack配置"><a href="#最简webpack配置" class="headerlink" title="最简webpack配置"></a>最简webpack配置</h2><p>首先初始化npm和安装webpack的依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">yarn add webpack webpack-cli --dev</span><br></pre></td></tr></table></figure>
<p>配置webpack.config.js文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">  entry: path.resolve(__dirname, <span class="string">'src/index.js'</span>),</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,    <span class="comment">//  此处不设置，默认为 main.js</span></span><br><span class="line">    publicPath: <span class="string">'/'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明: publicPath上线时配置的是cdn的地址。</p>
<p>使用命令进行打包：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">webpack --mode production</span><br></pre></td></tr></table></figure>
<p>也可以将其配置到package.json中的 scripts 字段。<br>入口文件为src/index.js，打包输出到dist/bundle.js。</p>
<h2 id="使用模板html"><a href="#使用模板html" class="headerlink" title="使用模板html"></a>使用模板html</h2><p>html-webpack-plugin 可以指定 template 模板文件，将会在 output 目录下，生成 html 文件，并引入打包后的js。<br>安装依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add html-webpack-plugin --dev</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 增加 plugins 配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ... other code</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: path.resolve(__dirname, <span class="string">'src/index.html'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>HtmlWebpackPlugin 还有一些其他的参数，如title（html的title），minify（是否要压缩），filename（dist中生成的html文件名）等。</p>
<h2 id="配置-webpack-dev-server"><a href="#配置-webpack-dev-server" class="headerlink" title="配置 webpack-dev-server"></a>配置 webpack-dev-server</h2><p>webpack-dev-server 提供了一个简单的Web服务器和实时热更新的能力。<br>安装依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add webpack-dev-server --dev</span><br></pre></td></tr></table></figure>
<p>在 webpck.config.js 增加 devServer 配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> WebpackDevServer = <span class="built_in">require</span>(<span class="string">'webpack-dev-server'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//  ... other code</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    port: <span class="string">'8080'</span>,</span><br><span class="line">    host: <span class="string">'localhost'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 package.json 的 scripts 字段中增加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">dev: <span class="string">'webpack-dev-server --mode development'</span></span><br></pre></td></tr></table></figure>
<p>之后，我们就可以通过 npm run dev，来启动服务。<br>更多关于 <a href="https://webpack.js.org/configuration/dev-server/" target="_blank" rel="noopener">webpack-dev-server</a></p>
<h2 id="支持加载-css-文件"><a href="#支持加载-css-文件" class="headerlink" title="支持加载 css 文件"></a>支持加载 css 文件</h2><p>通过使用不同的 style-loader 和 css-loader，可以将 css 文件转换成js文件类型。<br>安装依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add style-loader css-loader --dev</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中增加 loader 的配置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//  ...other code</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>],</span><br><span class="line">        exclude: <span class="regexp">/node_module/</span>,</span><br><span class="line">        include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>loader 可以配置以下参数：</p>
<ul>
<li>test: 匹配处理文件的扩展名的正则表达式</li>
<li>use: loader的名称</li>
<li>include/exclude: 手动指定必须处理的文件夹或屏蔽不需要处理的文件夹</li>
<li>query: 为loader提供额外的设置选项</li>
</ul>
<p>如果需要给loader传参，那么可以使用use + loading的方式，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//  other code</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'style-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              insertAt: <span class="string">'top'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="支持加载图片"><a href="#支持加载图片" class="headerlink" title="支持加载图片"></a>支持加载图片</h2><ul>
<li>file-loader: 解决css等文件中的引入图片路径问题</li>
<li>url-loader: 当图片小于limit的时候会把图片base64编码，大于limit参数的时候还是使用file-loader进行拷贝</li>
</ul>
<p><strong>如果希望图片存放在单独的目录下，那么需要制定outputPath</strong></p>
<p>安装依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add url-loader file-loader --dev</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中增加loader的配置（增加在 module.rules的数组中）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//  ...other code</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(gif|jpg|png|bmp|eot|woff|woff2|ttf|svg)/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span>,</span><br><span class="line">              outputPath: <span class="string">'images'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="支持编译less和sass"><a href="#支持编译less和sass" class="headerlink" title="支持编译less和sass"></a>支持编译less和sass</h2><p>现在大家都习惯使用less或者sass编写css，那么也需要在webpack中进行配置。<br>安装对应的依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add less less-loader --dev</span><br><span class="line">yarn add sass sass-loader --dev</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中增加 loader 的配置（module.rules数组中）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//  ..  other code</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>],</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.scss/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>],</span><br><span class="line">        exclude: <span class="regexp">/nodu_modules/</span>,</span><br><span class="line">        include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="支持转义-ES6-ES7-JSX"><a href="#支持转义-ES6-ES7-JSX" class="headerlink" title="支持转义 ES6/ES7/JSX"></a>支持转义 ES6/ES7/JSX</h2><p>ES6/ES7/JSX 转义需要 Babel 的依赖，支持装饰器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add @babel/core babel-loader @babel/preset-env @babel/preset-react @babel/plugin-proposal-decorators @babel/plugin-proposal-object-rest-spread --dev</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中增加 loader 的配置（module.rules 数组中）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...other code</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">'@babel/react'</span>],</span><br><span class="line">            plugins: [</span><br><span class="line">              [<span class="string">'@babel/plugin-proposal-decorators'</span>, &#123;<span class="string">'legacy'</span>: <span class="literal">true</span>&#125;]</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      exclude: <span class="regexp">/nodu_modules/</span>,</span><br><span class="line">      include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="压缩js文件"><a href="#压缩js文件" class="headerlink" title="压缩js文件"></a>压缩js文件</h2><p>安装依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add uglifyjs-webpack-plugin --dev</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中增加 optimization 的配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyWebpackplugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ... other code</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="keyword">new</span> UglifyWebpackPlugin(&#123;</span><br><span class="line">        parallel: <span class="number">4</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>以上最新版webpack已经默认开启uglifyjs，不需要单独安装plugins</strong><br>但是它是单线程压缩的，我们还可以利用webpack-parallel-uglify-plugin，解决多个js打包并行压缩的需要，优化打包效率</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add webpack-parallel-uglify-plugin --dev</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中增加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> WebpackParallelUglifyPlugin = <span class="built_in">require</span>(<span class="string">'webpack-parallel-uglify-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//  other code</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> WebpackParallelUglifyPlugin(&#123;</span><br><span class="line">      ugfilyJS: &#123;</span><br><span class="line">        output: &#123;</span><br><span class="line">          beautify: <span class="literal">false</span>,  <span class="comment">//  是否保留空格和制表符</span></span><br><span class="line">          comments: <span class="literal">false</span>,  <span class="comment">//  是否保留注释</span></span><br><span class="line">        &#125;,</span><br><span class="line">        compress: &#123;</span><br><span class="line">          warnings: <span class="literal">false</span>,  <span class="comment">//  删除没有用到的代码时的警告信息,</span></span><br><span class="line">          drop_console: <span class="literal">true</span>,   <span class="comment">//  是否删除代码中的console语句</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="分离css（如果css文件较大的话）"><a href="#分离css（如果css文件较大的话）" class="headerlink" title="分离css（如果css文件较大的话）"></a>分离css（如果css文件较大的话）</h2><p>因为CSS的下载和JS可以并行，当一个html文件很大的时候，可以把css单独提取出来加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add mini-css-extract-plugin --dev</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中增加 plugins 的配置，并且将 ‘style-loader’ 修改为 {<br>  loader: MiniCssExtractPlugin.loader<br>}。<br>css打包在单独的目录，那么配置filename。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader,</span><br><span class="line">          &#125;, <span class="string">'css-loader'</span></span><br><span class="line">        ],</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader,</span><br><span class="line">          &#125;, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span></span><br><span class="line">        ],</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.sass/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader</span><br><span class="line">          &#125;, <span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span></span><br><span class="line">        ],</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'css/[name].css'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="压缩css文件"><a href="#压缩css文件" class="headerlink" title="压缩css文件"></a>压缩css文件</h2><p>安装依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add optimiza-css-assets-webpack-plugin --dev</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中的 optimization 中增加配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizaCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimiza-css-assets-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//  ... other code</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="keyword">new</span> OptimizaCssAssetsWebpackPlugin()</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="打包前先清空输出目录"><a href="#打包前先清空输出目录" class="headerlink" title="打包前先清空输出目录"></a>打包前先清空输出目录</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add clean-webpack-plugin --dev</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中增加 plugins 的配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...other code</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
</search>
